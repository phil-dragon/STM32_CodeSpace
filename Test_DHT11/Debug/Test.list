
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800483c  0800483c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012353  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cf  00000000  00000000  000323f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f60  00000000  00000000  00036530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b30  00000000  00000000  00059490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb4c  00000000  00000000  0006afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137b0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e34  00000000  00000000  00137b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004754 	.word	0x08004754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004754 	.word	0x08004754

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b44      	ldr	r3, [pc, #272]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a43      	ldr	r2, [pc, #268]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b41      	ldr	r3, [pc, #260]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a35      	ldr	r2, [pc, #212]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a27      	ldr	r2, [pc, #156]	; (8000694 <MX_GPIO_Init+0x12c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_GPIO_Init+0x12c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000610:	4821      	ldr	r0, [pc, #132]	; (8000698 <MX_GPIO_Init+0x130>)
 8000612:	f000 ff45 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2104      	movs	r1, #4
 800061a:	4820      	ldr	r0, [pc, #128]	; (800069c <MX_GPIO_Init+0x134>)
 800061c:	f000 ff40 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000620:	2310      	movs	r3, #16
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000634:	f000 fd80 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000638:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <MX_GPIO_Init+0x130>)
 8000652:	f000 fd71 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYUP_Pin;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYUP_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_GPIO_Init+0x134>)
 800066a:	f000 fd65 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800066e:	2304      	movs	r3, #4
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	2302      	movs	r3, #2
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_GPIO_Init+0x134>)
 8000686:	f000 fd57 	bl	8001138 <HAL_GPIO_Init>

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40021400 	.word	0x40021400
 800069c:	40020000 	.word	0x40020000
 80006a0:	40021000 	.word	0x40021000

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t DHT11_BUF[2] = {0};
 80006aa:	2300      	movs	r3, #0
 80006ac:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fb09 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f833 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff57 	bl	8000568 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ba:	f000 fa5f 	bl	8000b7c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80006be:	f000 fa07 	bl	8000ad0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);	//重定向初始化串口1
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <main+0x6c>)
 80006c4:	f000 f89a 	bl	80007fc <RetargetInit>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);	//单片机上电时，接收中断默认关闭，�??要我们手动打�??4444444444444444444444
 80006c8:	2201      	movs	r2, #1
 80006ca:	4912      	ldr	r1, [pc, #72]	; (8000714 <main+0x70>)
 80006cc:	4810      	ldr	r0, [pc, #64]	; (8000710 <main+0x6c>)
 80006ce:	f001 fef2 	bl	80024b6 <HAL_UART_Receive_IT>
  HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f000 fb67 	bl	8000da8 <HAL_Delay>
  DHT11_Init();
 80006da:	f002 fee4 	bl	80034a6 <DHT11_Init>
  HAL_Delay(1000);
 80006de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e2:	f000 fb61 	bl	8000da8 <HAL_Delay>
  DHT11_ReadData(DHT11_BUF);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fee5 	bl	80034b8 <DHT11_ReadData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 DHT11_ReadData(DHT11_BUF);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fee1 	bl	80034b8 <DHT11_ReadData>
	 printf("Humi:%02d Temp:%02d\r\n",DHT11_BUF[0],DHT11_BUF[1]);
 80006f6:	793b      	ldrb	r3, [r7, #4]
 80006f8:	4619      	mov	r1, r3
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <main+0x74>)
 8000700:	f002 ffa6 	bl	8003650 <iprintf>
	 HAL_Delay(1500);
 8000704:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000708:	f000 fb4e 	bl	8000da8 <HAL_Delay>
  {
 800070c:	e7ef      	b.n	80006ee <main+0x4a>
 800070e:	bf00      	nop
 8000710:	200000e8 	.word	0x200000e8
 8000714:	20000130 	.word	0x20000130
 8000718:	0800476c 	.word	0x0800476c

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f002 ff88 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000790:	23a8      	movs	r3, #168	; 0xa8
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fe97 	bl	80014d4 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f820 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2105      	movs	r1, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f8f8 	bl	80019c4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f809 	bl	80007f0 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <RetargetInit+0x28>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <RetargetInit+0x2c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	2300      	movs	r3, #0
 8000812:	2202      	movs	r2, #2
 8000814:	2100      	movs	r1, #0
 8000816:	f002 ff49 	bl	80036ac <setvbuf>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000009c 	.word	0x2000009c
 8000828:	2000000c 	.word	0x2000000c

0800082c <_isatty>:

int _isatty(int fd) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db04      	blt.n	8000844 <_isatty+0x18>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b02      	cmp	r3, #2
 800083e:	dc01      	bgt.n	8000844 <_isatty+0x18>
    return 1;
 8000840:	2301      	movs	r3, #1
 8000842:	e005      	b.n	8000850 <_isatty+0x24>

  errno = EBADF;
 8000844:	f002 fed2 	bl	80035ec <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	2209      	movs	r2, #9
 800084c:	601a      	str	r2, [r3, #0]
  return 0;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_write>:

int _write(int fd, char* ptr, int len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d002      	beq.n	8000870 <_write+0x18>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d111      	bne.n	8000894 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <_write+0x54>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b29a      	uxth	r2, r3
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	f001 fce6 	bl	800224e <HAL_UART_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <_write+0x38>
      return len;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	e008      	b.n	80008a2 <_write+0x4a>
    else
      return EIO;
 8000890:	2305      	movs	r3, #5
 8000892:	e006      	b.n	80008a2 <_write+0x4a>
  }
  errno = EBADF;
 8000894:	f002 feaa 	bl	80035ec <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	2209      	movs	r2, #9
 800089c:	601a      	str	r2, [r3, #0]
  return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000009c 	.word	0x2000009c

080008b0 <_close>:

int _close(int fd) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db04      	blt.n	80008c8 <_close+0x18>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	dc01      	bgt.n	80008c8 <_close+0x18>
    return 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e006      	b.n	80008d6 <_close+0x26>

  errno = EBADF;
 80008c8:	f002 fe90 	bl	80035ec <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2209      	movs	r2, #9
 80008d0:	601a      	str	r2, [r3, #0]
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80008ea:	f002 fe7f 	bl	80035ec <__errno>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2209      	movs	r2, #9
 80008f2:	601a      	str	r2, [r3, #0]
  return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_read>:

int _read(int fd, char* ptr, int len) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d110      	bne.n	8000934 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <_read+0x4c>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2201      	movs	r2, #1
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	f001 fd28 	bl	8002372 <HAL_UART_Receive>
 8000922:	4603      	mov	r3, r0
 8000924:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <_read+0x30>
      return 1;
 800092c:	2301      	movs	r3, #1
 800092e:	e008      	b.n	8000942 <_read+0x42>
    else
      return EIO;
 8000930:	2305      	movs	r3, #5
 8000932:	e006      	b.n	8000942 <_read+0x42>
  }
  errno = EBADF;
 8000934:	f002 fe5a 	bl	80035ec <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	2209      	movs	r2, #9
 800093c:	601a      	str	r2, [r3, #0]
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000009c 	.word	0x2000009c

08000950 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db08      	blt.n	8000972 <_fstat+0x22>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	dc05      	bgt.n	8000972 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096c:	605a      	str	r2, [r3, #4]
    return 0;
 800096e:	2300      	movs	r3, #0
 8000970:	e005      	b.n	800097e <_fstat+0x2e>
  }

  errno = EBADF;
 8000972:	f002 fe3b 	bl	80035ec <__errno>
 8000976:	4603      	mov	r3, r0
 8000978:	2209      	movs	r2, #9
 800097a:	601a      	str	r2, [r3, #0]
  return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f9a0 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART1_IRQHandler+0x10>)
 8000a32:	f001 fd71 	bl	8002518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000e8 	.word	0x200000e8

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f002 fdbc 	bl	80035ec <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20020000 	.word	0x20020000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	2000008c 	.word	0x2000008c
 8000aa8:	20000148 	.word	0x20000148

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <MX_TIM6_Init+0x64>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000ae6:	2253      	movs	r2, #83	; 0x53
 8000ae8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000afe:	f001 f95d 	bl	8001dbc <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000b08:	f7ff fe72 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_TIM6_Init+0x60>)
 8000b1a:	f001 facf 	bl	80020bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000b24:	f7ff fe64 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000a0 	.word	0x200000a0
 8000b34:	40001000 	.word	0x40001000

08000b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10d      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_TIM_Base_MspInit+0x40>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART1_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f001 fafe 	bl	80021b4 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f7ff fe17 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000e8 	.word	0x200000e8
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d134      	bne.n	8000c5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UART_MspInit+0x9c>)
 8000c48:	f000 fa76 	bl	8001138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2025      	movs	r0, #37	; 0x25
 8000c52:	f000 f9a8 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c56:	2025      	movs	r0, #37	; 0x25
 8000c58:	f000 f9c1 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ff07 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f002 fcab 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fcff 	bl	80006a4 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb4:	08004844 	.word	0x08004844
  ldr r2, =_sbss
 8000cb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cbc:	20000144 	.word	0x20000144

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe46 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	2000012c 	.word	0x2000012c

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2000012c 	.word	0x2000012c

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff feb6 	bl	8000d90 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e052      	b.n	80010ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0216 	bic.w	r2, r2, #22
 8001052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_DMA_Abort+0x62>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e013      	b.n	80010be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe7b 	bl	8000d90 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d90c      	bls.n	80010be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e015      	b.n	80010ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e4      	bne.n	8001096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	223f      	movs	r2, #63	; 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00c      	b.n	800112a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2205      	movs	r2, #5
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e16b      	b.n	800142c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 815a 	bne.w	8001426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b4 	beq.w	8001426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <HAL_GPIO_Init+0x310>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x314>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x318>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x320>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x324>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x328>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x20a>
 800133e:	2307      	movs	r3, #7
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001342:	2308      	movs	r3, #8
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_GPIO_Init+0x334>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_GPIO_Init+0x334>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_GPIO_Init+0x334>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_GPIO_Init+0x334>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae90 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e264      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d075      	beq.n	80015de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f2:	4ba3      	ldr	r3, [pc, #652]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d00c      	beq.n	8001518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4ba0      	ldr	r3, [pc, #640]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001506:	2b08      	cmp	r3, #8
 8001508:	d112      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150a:	4b9d      	ldr	r3, [pc, #628]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001516:	d10b      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	4b99      	ldr	r3, [pc, #612]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05b      	beq.n	80015dc <HAL_RCC_OscConfig+0x108>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d157      	bne.n	80015dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e23f      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d106      	bne.n	8001548 <HAL_RCC_OscConfig+0x74>
 800153a:	4b91      	ldr	r3, [pc, #580]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a90      	ldr	r2, [pc, #576]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b8b      	ldr	r3, [pc, #556]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a8a      	ldr	r2, [pc, #552]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a87      	ldr	r2, [pc, #540]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 800156c:	4b84      	ldr	r3, [pc, #528]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a83      	ldr	r2, [pc, #524]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a80      	ldr	r2, [pc, #512]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fc00 	bl	8000d90 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fbfc 	bl	8000d90 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e204      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xc0>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbec 	bl	8000d90 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbe8 	bl	8000d90 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1f0      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0xe8>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b62      	ldr	r3, [pc, #392]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1c4      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4952      	ldr	r1, [pc, #328]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <HAL_RCC_OscConfig+0x2b0>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fba1 	bl	8000d90 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fb9d 	bl	8000d90 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1a5      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4940      	ldr	r1, [pc, #256]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_OscConfig+0x2b0>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb80 	bl	8000d90 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb7c 	bl	8000d90 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e184      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d030      	beq.n	8001720 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d016      	beq.n	80016f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x2b4>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb60 	bl	8000d90 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb5c 	bl	8000d90 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e164      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x200>
 80016f2:	e015      	b.n	8001720 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_RCC_OscConfig+0x2b4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fb49 	bl	8000d90 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fb45 	bl	8000d90 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e14d      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a0 	beq.w	800186e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x2b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d121      	bne.n	80017ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x2b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_RCC_OscConfig+0x2b8>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff fb0b 	bl	8000d90 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e011      	b.n	80017a2 <HAL_RCC_OscConfig+0x2ce>
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	42470000 	.word	0x42470000
 8001788:	42470e80 	.word	0x42470e80
 800178c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff fafe 	bl	8000d90 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e106      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b85      	ldr	r3, [pc, #532]	; (80019b8 <HAL_RCC_OscConfig+0x4e4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a80      	ldr	r2, [pc, #512]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x32a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x312>
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x32a>
 80017e6:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a71      	ldr	r2, [pc, #452]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fac3 	bl	8000d90 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fabf 	bl	8000d90 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0c5      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b65      	ldr	r3, [pc, #404]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x33a>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff faad 	bl	8000d90 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff faa9 	bl	8000d90 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0af      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 809b 	beq.w	80019ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d05c      	beq.n	800193e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d141      	bne.n	8001910 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_RCC_OscConfig+0x4ec>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fa7d 	bl	8000d90 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fa79 	bl	8000d90 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e081      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	019b      	lsls	r3, r3, #6
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	4937      	ldr	r1, [pc, #220]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_OscConfig+0x4ec>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fa52 	bl	8000d90 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff fa4e 	bl	8000d90 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e056      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x41c>
 800190e:	e04e      	b.n	80019ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_RCC_OscConfig+0x4ec>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fa3b 	bl	8000d90 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fa37 	bl	8000d90 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e03f      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x44a>
 800193c:	e037      	b.n	80019ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e032      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_RCC_OscConfig+0x4e8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d028      	beq.n	80019aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d121      	bne.n	80019aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d11a      	bne.n	80019aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001980:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001982:	4293      	cmp	r3, r2
 8001984:	d111      	bne.n	80019aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40007000 	.word	0x40007000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470060 	.word	0x42470060

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0cc      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d90c      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b8      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	494d      	ldr	r1, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d044      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e067      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f96c 	bl	8000d90 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff f968 	bl	8000d90 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e04f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d20c      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4916      	ldr	r1, [pc, #88]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f821 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490a      	ldr	r1, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8cc 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08004784 	.word	0x08004784
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	f200 80bd 	bhi.w	8001d34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc2:	e0b7      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bc6:	60bb      	str	r3, [r7, #8]
       break;
 8001bc8:	e0b7      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b61      	ldr	r3, [pc, #388]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bcc:	60bb      	str	r3, [r7, #8]
      break;
 8001bce:	e0b4      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04d      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	461a      	mov	r2, r3
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	ea02 0800 	and.w	r8, r2, r0
 8001bfe:	ea03 0901 	and.w	r9, r3, r1
 8001c02:	4640      	mov	r0, r8
 8001c04:	4649      	mov	r1, r9
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	014b      	lsls	r3, r1, #5
 8001c10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c14:	0142      	lsls	r2, r0, #5
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	ebb0 0008 	subs.w	r0, r0, r8
 8001c1e:	eb61 0109 	sbc.w	r1, r1, r9
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	018b      	lsls	r3, r1, #6
 8001c2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c30:	0182      	lsls	r2, r0, #6
 8001c32:	1a12      	subs	r2, r2, r0
 8001c34:	eb63 0301 	sbc.w	r3, r3, r1
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	00d9      	lsls	r1, r3, #3
 8001c42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c46:	00d0      	lsls	r0, r2, #3
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	eb12 0208 	adds.w	r2, r2, r8
 8001c50:	eb43 0309 	adc.w	r3, r3, r9
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0259      	lsls	r1, r3, #9
 8001c5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c62:	0250      	lsls	r0, r2, #9
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f7fe fafc 	bl	8000270 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e04a      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	ea02 0400 	and.w	r4, r2, r0
 8001c9a:	ea03 0501 	and.w	r5, r3, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	014b      	lsls	r3, r1, #5
 8001cac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb0:	0142      	lsls	r2, r0, #5
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	1b00      	subs	r0, r0, r4
 8001cb8:	eb61 0105 	sbc.w	r1, r1, r5
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	018b      	lsls	r3, r1, #6
 8001cc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cca:	0182      	lsls	r2, r0, #6
 8001ccc:	1a12      	subs	r2, r2, r0
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	00d9      	lsls	r1, r3, #3
 8001cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce0:	00d0      	lsls	r0, r2, #3
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	1912      	adds	r2, r2, r4
 8001ce8:	eb45 0303 	adc.w	r3, r5, r3
 8001cec:	f04f 0000 	mov.w	r0, #0
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	0299      	lsls	r1, r3, #10
 8001cf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cfa:	0290      	lsls	r0, r2, #10
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f7fe fab0 	bl	8000270 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	60bb      	str	r3, [r7, #8]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d36:	60bb      	str	r3, [r7, #8]
      break;
 8001d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08004794 	.word	0x08004794

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0b5b      	lsrs	r3, r3, #13
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08004794 	.word	0x08004794

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fea8 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 f8be 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d001      	beq.n	8001e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e046      	b.n	8001f02 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_TIM_Base_Start+0xb4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d01d      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_TIM_Base_Start+0xb8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_TIM_Base_Start+0xbc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_TIM_Base_Start+0xc0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_TIM_Base_Start+0xc4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_TIM_Base_Start+0xc8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_Base_Start+0x70>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_TIM_Base_Start+0xcc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d010      	beq.n	8001f00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	e007      	b.n	8001f00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40010400 	.word	0x40010400
 8001f24:	40014000 	.word	0x40014000
 8001f28:	40001800 	.word	0x40001800

08001f2c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_TIM_Base_Stop+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_Base_Stop+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d027      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d023      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d017      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <TIM_Base_SetConfig+0x128>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <TIM_Base_SetConfig+0x12c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <TIM_Base_SetConfig+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <TIM_Base_SetConfig+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	40001800 	.word	0x40001800
 80020b4:	40001c00 	.word	0x40001c00
 80020b8:	40002000 	.word	0x40002000

080020bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e05a      	b.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d01d      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d018      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10c      	bne.n	8002178 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4313      	orrs	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000
 800219c:	40000400 	.word	0x40000400
 80021a0:	40000800 	.word	0x40000800
 80021a4:	40000c00 	.word	0x40000c00
 80021a8:	40010400 	.word	0x40010400
 80021ac:	40014000 	.word	0x40014000
 80021b0:	40001800 	.word	0x40001800

080021b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e03f      	b.n	8002246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fcf8 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fe7d 	bl	8002ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800220c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800221c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b08a      	sub	sp, #40	; 0x28
 8002252:	af02      	add	r7, sp, #8
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d17c      	bne.n	8002368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_UART_Transmit+0x2c>
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e075      	b.n	800236a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit+0x3e>
 8002288:	2302      	movs	r3, #2
 800228a:	e06e      	b.n	800236a <HAL_UART_Transmit+0x11c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fd75 	bl	8000d90 <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022bc:	d108      	bne.n	80022d0 <HAL_UART_Transmit+0x82>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e003      	b.n	80022d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e0:	e02a      	b.n	8002338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fbc1 	bl	8002a74 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e036      	b.n	800236a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10b      	bne.n	800231a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3302      	adds	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e007      	b.n	800232a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3301      	adds	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1cf      	bne.n	80022e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2140      	movs	r1, #64	; 0x40
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fb91 	bl	8002a74 <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b08a      	sub	sp, #40	; 0x28
 8002376:	af02      	add	r7, sp, #8
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b20      	cmp	r3, #32
 8002390:	f040 808c 	bne.w	80024ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_UART_Receive+0x2e>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e084      	b.n	80024ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Receive+0x40>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e07d      	b.n	80024ae <HAL_UART_Receive+0x13c>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2222      	movs	r2, #34	; 0x22
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ce:	f7fe fcdf 	bl	8000d90 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d108      	bne.n	80023fc <HAL_UART_Receive+0x8a>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e003      	b.n	8002404 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800240c:	e043      	b.n	8002496 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	2120      	movs	r1, #32
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb2b 	bl	8002a74 <UART_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e042      	b.n	80024ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243a:	b29a      	uxth	r2, r3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3302      	adds	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e01f      	b.n	8002488 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d007      	beq.n	8002462 <HAL_UART_Receive+0xf0>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <HAL_UART_Receive+0xfe>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e008      	b.n	8002482 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800247c:	b2da      	uxtb	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1b6      	bne.n	800240e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d11d      	bne.n	800250c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_UART_Receive_IT+0x26>
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Receive_IT+0x38>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e00f      	b.n	800250e <HAL_UART_Receive_IT+0x58>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	461a      	mov	r2, r3
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fb24 	bl	8002b50 <UART_Start_Receive_IT>
 8002508:	4603      	mov	r3, r0
 800250a:	e000      	b.n	800250e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ba      	sub	sp, #232	; 0xe8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
 800256a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fc03 	bl	8002d82 <UART_Receive_IT>
      return;
 800257c:	e256      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800257e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80de 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
 8002588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80d1 	beq.w	8002744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
 80025ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
 80025d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
 80025f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81ed 	beq.w	8002a22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
 8002654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fb8e 	bl	8002d82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_UART_IRQHandler+0x17a>
 800268a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04f      	beq.n	8002732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa96 	bl	8002bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d141      	bne.n	800272a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3314      	adds	r3, #20
 80026ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d9      	bne.n	80026a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d013      	beq.n	8002722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_UART_IRQHandler+0x3dc>)
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fcf3 	bl	80010f2 <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	4610      	mov	r0, r2
 800271e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	e00e      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f990 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	e00a      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f98c 	bl	8002a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	e006      	b.n	8002740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f988 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800273e:	e170      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	bf00      	nop
    return;
 8002742:	e16e      	b.n	8002a22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 814a 	bne.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8143 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 813c 	beq.w	80029e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	f040 80b4 	bne.w	80028f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800279c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8140 	beq.w	8002a26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f080 8139 	bcs.w	8002a26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	f000 8088 	beq.w	80028da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1d9      	bne.n	80027ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800283e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e1      	bne.n	8002816 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800287c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e3      	bne.n	8002852 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e3      	bne.n	8002898 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fb9c 	bl	8001012 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8b6 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f0:	e099      	b.n	8002a26 <HAL_UART_IRQHandler+0x50e>
 80028f2:	bf00      	nop
 80028f4:	08002c8b 	.word	0x08002c8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002900:	b29b      	uxth	r3, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 808b 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8086 	beq.w	8002a2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002942:	647a      	str	r2, [r7, #68]	; 0x44
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e3      	bne.n	800291e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800297a:	633a      	str	r2, [r7, #48]	; 0x30
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e3      	bne.n	8002956 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0310 	bic.w	r3, r3, #16
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	617b      	str	r3, [r7, #20]
   return(result);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e3      	bne.n	800299c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f83e 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029e0:	e023      	b.n	8002a2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f959 	bl	8002cb2 <UART_Transmit_IT>
    return;
 8002a00:	e014      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
 8002a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f999 	bl	8002d52 <UART_EndTransmit_IT>
    return;
 8002a20:	e004      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
    return;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <HAL_UART_IRQHandler+0x514>
      return;
 8002a2a:	bf00      	nop
  }
}
 8002a2c:	37e8      	adds	r7, #232	; 0xe8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop

08002a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b090      	sub	sp, #64	; 0x40
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a84:	e050      	b.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d04c      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a94:	f7fe f97c 	bl	8000d90 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d241      	bcs.n	8002b28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac4:	637a      	str	r2, [r7, #52]	; 0x34
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	623a      	str	r2, [r7, #32]
 8002afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	69f9      	ldr	r1, [r7, #28]
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e00f      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d09f      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3740      	adds	r7, #64	; 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2222      	movs	r2, #34	; 0x22
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b095      	sub	sp, #84	; 0x54
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bec:	643a      	str	r2, [r7, #64]	; 0x40
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d119      	bne.n	8002c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5c:	61ba      	str	r2, [r7, #24]
 8002c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6979      	ldr	r1, [r7, #20]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c7e:	bf00      	nop
 8002c80:	3754      	adds	r7, #84	; 0x54
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fecf 	bl	8002a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b21      	cmp	r3, #33	; 0x21
 8002cc4:	d13e      	bne.n	8002d44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d114      	bne.n	8002cfa <UART_Transmit_IT+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d110      	bne.n	8002cfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	621a      	str	r2, [r3, #32]
 8002cf8:	e008      	b.n	8002d0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	1c59      	adds	r1, r3, #1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6211      	str	r1, [r2, #32]
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10f      	bne.n	8002d40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fe5e 	bl	8002a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08c      	sub	sp, #48	; 0x30
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b22      	cmp	r3, #34	; 0x22
 8002d94:	f040 80ab 	bne.w	8002eee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d117      	bne.n	8002dd2 <UART_Receive_IT+0x50>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	1c9a      	adds	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd0:	e026      	b.n	8002e20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de4:	d007      	beq.n	8002df6 <UART_Receive_IT+0x74>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <UART_Receive_IT+0x82>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e008      	b.n	8002e16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d15a      	bne.n	8002eea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0220 	bic.w	r2, r2, #32
 8002e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d135      	bne.n	8002ee0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 0310 	bic.w	r3, r3, #16
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	623a      	str	r2, [r7, #32]
 8002e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d10a      	bne.n	8002ed2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fdbf 	bl	8002a5c <HAL_UARTEx_RxEventCallback>
 8002ede:	e002      	b.n	8002ee6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb23 	bl	800352c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e002      	b.n	8002ef0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	; 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efc:	b09f      	sub	sp, #124	; 0x7c
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	ea40 0301 	orr.w	r3, r0, r1
 8002f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f46:	430b      	orrs	r3, r1
 8002f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	6999      	ldr	r1, [r3, #24]
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	ea40 0301 	orr.w	r3, r0, r1
 8002f60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4bc5      	ldr	r3, [pc, #788]	; (800327c <UART_SetConfig+0x384>)
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d004      	beq.n	8002f76 <UART_SetConfig+0x7e>
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4bc3      	ldr	r3, [pc, #780]	; (8003280 <UART_SetConfig+0x388>)
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d103      	bne.n	8002f7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f76:	f7fe ff0d 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 8002f7a:	6778      	str	r0, [r7, #116]	; 0x74
 8002f7c:	e002      	b.n	8002f84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f7e:	f7fe fef5 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8002f82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8c:	f040 80b6 	bne.w	80030fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f92:	461c      	mov	r4, r3
 8002f94:	f04f 0500 	mov.w	r5, #0
 8002f98:	4622      	mov	r2, r4
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	6439      	str	r1, [r7, #64]	; 0x40
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fa8:	1912      	adds	r2, r2, r4
 8002faa:	eb45 0303 	adc.w	r3, r5, r3
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	00d9      	lsls	r1, r3, #3
 8002fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fbc:	00d0      	lsls	r0, r2, #3
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	1911      	adds	r1, r2, r4
 8002fc4:	6639      	str	r1, [r7, #96]	; 0x60
 8002fc6:	416b      	adcs	r3, r5
 8002fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8002fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	1891      	adds	r1, r2, r2
 8002fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd8:	415b      	adcs	r3, r3
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fe0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002fe4:	f7fd f944 	bl	8000270 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4ba5      	ldr	r3, [pc, #660]	; (8003284 <UART_SetConfig+0x38c>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011e      	lsls	r6, r3, #4
 8002ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	f04f 0500 	mov.w	r5, #0
 8002ffe:	4622      	mov	r2, r4
 8003000:	462b      	mov	r3, r5
 8003002:	1891      	adds	r1, r2, r2
 8003004:	6339      	str	r1, [r7, #48]	; 0x30
 8003006:	415b      	adcs	r3, r3
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800300e:	1912      	adds	r2, r2, r4
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	f04f 0000 	mov.w	r0, #0
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	00d9      	lsls	r1, r3, #3
 800301e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003022:	00d0      	lsls	r0, r2, #3
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	1911      	adds	r1, r2, r4
 800302a:	65b9      	str	r1, [r7, #88]	; 0x58
 800302c:	416b      	adcs	r3, r5
 800302e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	461a      	mov	r2, r3
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	1891      	adds	r1, r2, r2
 800303c:	62b9      	str	r1, [r7, #40]	; 0x28
 800303e:	415b      	adcs	r3, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003046:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800304a:	f7fd f911 	bl	8000270 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <UART_SetConfig+0x38c>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a87      	ldr	r2, [pc, #540]	; (8003284 <UART_SetConfig+0x38c>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003074:	441e      	add	r6, r3
 8003076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003078:	4618      	mov	r0, r3
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	1894      	adds	r4, r2, r2
 8003084:	623c      	str	r4, [r7, #32]
 8003086:	415b      	adcs	r3, r3
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800308e:	1812      	adds	r2, r2, r0
 8003090:	eb41 0303 	adc.w	r3, r1, r3
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	f04f 0500 	mov.w	r5, #0
 800309c:	00dd      	lsls	r5, r3, #3
 800309e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030a2:	00d4      	lsls	r4, r2, #3
 80030a4:	4622      	mov	r2, r4
 80030a6:	462b      	mov	r3, r5
 80030a8:	1814      	adds	r4, r2, r0
 80030aa:	653c      	str	r4, [r7, #80]	; 0x50
 80030ac:	414b      	adcs	r3, r1
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	1891      	adds	r1, r2, r2
 80030bc:	61b9      	str	r1, [r7, #24]
 80030be:	415b      	adcs	r3, r3
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030ca:	f7fd f8d1 	bl	8000270 <__aeabi_uldivmod>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <UART_SetConfig+0x38c>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	3332      	adds	r3, #50	; 0x32
 80030e6:	4a67      	ldr	r2, [pc, #412]	; (8003284 <UART_SetConfig+0x38c>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4432      	add	r2, r6
 80030f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030fa:	e0b9      	b.n	8003270 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fe:	461c      	mov	r4, r3
 8003100:	f04f 0500 	mov.w	r5, #0
 8003104:	4622      	mov	r2, r4
 8003106:	462b      	mov	r3, r5
 8003108:	1891      	adds	r1, r2, r2
 800310a:	6139      	str	r1, [r7, #16]
 800310c:	415b      	adcs	r3, r3
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003114:	1912      	adds	r2, r2, r4
 8003116:	eb45 0303 	adc.w	r3, r5, r3
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	00d9      	lsls	r1, r3, #3
 8003124:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003128:	00d0      	lsls	r0, r2, #3
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	eb12 0804 	adds.w	r8, r2, r4
 8003132:	eb43 0905 	adc.w	r9, r3, r5
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	008b      	lsls	r3, r1, #2
 800314a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800314e:	0082      	lsls	r2, r0, #2
 8003150:	4640      	mov	r0, r8
 8003152:	4649      	mov	r1, r9
 8003154:	f7fd f88c 	bl	8000270 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <UART_SetConfig+0x38c>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011e      	lsls	r6, r3, #4
 8003166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003168:	4618      	mov	r0, r3
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	1894      	adds	r4, r2, r2
 8003174:	60bc      	str	r4, [r7, #8]
 8003176:	415b      	adcs	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317e:	1812      	adds	r2, r2, r0
 8003180:	eb41 0303 	adc.w	r3, r1, r3
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	f04f 0500 	mov.w	r5, #0
 800318c:	00dd      	lsls	r5, r3, #3
 800318e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003192:	00d4      	lsls	r4, r2, #3
 8003194:	4622      	mov	r2, r4
 8003196:	462b      	mov	r3, r5
 8003198:	1814      	adds	r4, r2, r0
 800319a:	64bc      	str	r4, [r7, #72]	; 0x48
 800319c:	414b      	adcs	r3, r1
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	008b      	lsls	r3, r1, #2
 80031b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031b8:	0082      	lsls	r2, r0, #2
 80031ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031be:	f7fd f857 	bl	8000270 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <UART_SetConfig+0x38c>)
 80031c8:	fba3 1302 	umull	r1, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	2164      	movs	r1, #100	; 0x64
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	3332      	adds	r3, #50	; 0x32
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <UART_SetConfig+0x38c>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e6:	441e      	add	r6, r3
 80031e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ea:	4618      	mov	r0, r3
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	1894      	adds	r4, r2, r2
 80031f6:	603c      	str	r4, [r7, #0]
 80031f8:	415b      	adcs	r3, r3
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003200:	1812      	adds	r2, r2, r0
 8003202:	eb41 0303 	adc.w	r3, r1, r3
 8003206:	f04f 0400 	mov.w	r4, #0
 800320a:	f04f 0500 	mov.w	r5, #0
 800320e:	00dd      	lsls	r5, r3, #3
 8003210:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003214:	00d4      	lsls	r4, r2, #3
 8003216:	4622      	mov	r2, r4
 8003218:	462b      	mov	r3, r5
 800321a:	eb12 0a00 	adds.w	sl, r2, r0
 800321e:	eb43 0b01 	adc.w	fp, r3, r1
 8003222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	008b      	lsls	r3, r1, #2
 8003236:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800323a:	0082      	lsls	r2, r0, #2
 800323c:	4650      	mov	r0, sl
 800323e:	4659      	mov	r1, fp
 8003240:	f7fd f816 	bl	8000270 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <UART_SetConfig+0x38c>)
 800324a:	fba3 1302 	umull	r1, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2164      	movs	r1, #100	; 0x64
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	3332      	adds	r3, #50	; 0x32
 800325c:	4a09      	ldr	r2, [pc, #36]	; (8003284 <UART_SetConfig+0x38c>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4432      	add	r2, r6
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	377c      	adds	r7, #124	; 0x7c
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327a:	bf00      	nop
 800327c:	40011000 	.word	0x40011000
 8003280:	40011400 	.word	0x40011400
 8003284:	51eb851f 	.word	0x51eb851f

08003288 <delay_us>:

#include "delay.h"
#include "../../Core/Inc/tim.h"

void delay_us(uint16_t us)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
    uint16_t differ=0xffff-us-5;
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8003298:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800329c:	33fa      	adds	r3, #250	; 0xfa
 800329e:	81fb      	strh	r3, [r7, #14]


    HAL_TIM_Base_Start(&htim6);
 80032a0:	480b      	ldr	r0, [pc, #44]	; (80032d0 <delay_us+0x48>)
 80032a2:	f7fe fddb 	bl	8001e5c <HAL_TIM_Base_Start>
    __HAL_TIM_SetCounter(&htim6,differ);
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <delay_us+0x48>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	89fa      	ldrh	r2, [r7, #14]
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24
    while(differ < 0xffff-5)
 80032ae:	e003      	b.n	80032b8 <delay_us+0x30>
    {
        differ = __HAL_TIM_GetCounter(&htim6);
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <delay_us+0x48>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	81fb      	strh	r3, [r7, #14]
    while(differ < 0xffff-5)
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 80032be:	4293      	cmp	r3, r2
 80032c0:	d9f6      	bls.n	80032b0 <delay_us+0x28>
    }
    HAL_TIM_Base_Stop(&htim6);
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <delay_us+0x48>)
 80032c4:	f7fe fe32 	bl	8001f2c <HAL_TIM_Base_Stop>

}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200000a0 	.word	0x200000a0

080032d4 <DHT11_IO_OUT>:
#include "dht11.h"
#include "../delay/delay.h"
#include "../../Core/Inc/gpio.h"

void DHT11_IO_OUT(void)	//端口变为输出
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT11_Pin;
 80032e8:	2304      	movs	r3, #4
 80032ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f4:	2302      	movs	r3, #2
 80032f6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <DHT11_IO_OUT+0x38>)
 80032fe:	f7fd ff1b 	bl	8001138 <HAL_GPIO_Init>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40020000 	.word	0x40020000

08003310 <DHT11_IO_IN>:

void DHT11_IO_IN(void)	//端口变为输入
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT11_Pin;
 8003324:	2304      	movs	r3, #4
 8003326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003330:	2302      	movs	r3, #2
 8003332:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4803      	ldr	r0, [pc, #12]	; (8003348 <DHT11_IO_IN+0x38>)
 800333a:	f7fd fefd 	bl	8001138 <HAL_GPIO_Init>
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40020000 	.word	0x40020000

0800334c <DHT11_RST>:

void DHT11_RST(void)	//DHT11端口复位，发出起始信号（IO发送）
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 8003350:	f7ff ffc0 	bl	80032d4 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOA, DHT11_Pin, GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2104      	movs	r1, #4
 8003358:	4807      	ldr	r0, [pc, #28]	; (8003378 <DHT11_RST+0x2c>)
 800335a:	f7fe f8a1 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(20);	//拉低至少20ms
 800335e:	2014      	movs	r0, #20
 8003360:	f7fd fd22 	bl	8000da8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, DHT11_Pin, GPIO_PIN_SET);
 8003364:	2201      	movs	r2, #1
 8003366:	2104      	movs	r1, #4
 8003368:	4803      	ldr	r0, [pc, #12]	; (8003378 <DHT11_RST+0x2c>)
 800336a:	f7fe f899 	bl	80014a0 <HAL_GPIO_WritePin>
	delay_us(30);	//主机拉高20-40ms
 800336e:	201e      	movs	r0, #30
 8003370:	f7ff ff8a 	bl	8003288 <delay_us>
}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40020000 	.word	0x40020000

0800337c <DHT11_Check>:

uint8_t DHT11_Check(void)	//返回值为0表示通信成功，为1失败
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();	//IO切换带输入状态
 8003386:	f7ff ffc3 	bl	8003310 <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//dht11拉低40-80ms
 800338a:	e005      	b.n	8003398 <DHT11_Check+0x1c>
	{
		retry++;
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	3301      	adds	r3, #1
 8003390:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8003392:	2001      	movs	r0, #1
 8003394:	f7ff ff78 	bl	8003288 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//dht11拉低40-80ms
 8003398:	2104      	movs	r1, #4
 800339a:	4815      	ldr	r0, [pc, #84]	; (80033f0 <DHT11_Check+0x74>)
 800339c:	f7fe f868 	bl	8001470 <HAL_GPIO_ReadPin>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <DHT11_Check+0x30>
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b63      	cmp	r3, #99	; 0x63
 80033aa:	d9ef      	bls.n	800338c <DHT11_Check+0x10>
	}
	if(retry >= 100)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b63      	cmp	r3, #99	; 0x63
 80033b0:	d901      	bls.n	80033b6 <DHT11_Check+0x3a>
		return 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e018      	b.n	80033e8 <DHT11_Check+0x6c>
	else
		retry = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//dht11拉高40-80ms
 80033ba:	e005      	b.n	80033c8 <DHT11_Check+0x4c>
	{
		retry++;
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	3301      	adds	r3, #1
 80033c0:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7ff ff60 	bl	8003288 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//dht11拉高40-80ms
 80033c8:	2104      	movs	r1, #4
 80033ca:	4809      	ldr	r0, [pc, #36]	; (80033f0 <DHT11_Check+0x74>)
 80033cc:	f7fe f850 	bl	8001470 <HAL_GPIO_ReadPin>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <DHT11_Check+0x60>
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b63      	cmp	r3, #99	; 0x63
 80033da:	d9ef      	bls.n	80033bc <DHT11_Check+0x40>
	}
	if(retry >= 100)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	2b63      	cmp	r3, #99	; 0x63
 80033e0:	d901      	bls.n	80033e6 <DHT11_Check+0x6a>
		return 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <DHT11_Check+0x6c>
	else
		return 0;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40020000 	.word	0x40020000

080033f4 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(void)	//从DHT11里读取一个位，返回值位0/1
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	71fb      	strb	r3, [r7, #7]
	while(HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//等待变为低电平
 80033fe:	e005      	b.n	800340c <DHT11_ReadBit+0x18>
	{
		retry++;
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	3301      	adds	r3, #1
 8003404:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f7ff ff3e 	bl	8003288 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//等待变为低电平
 800340c:	2104      	movs	r1, #4
 800340e:	4816      	ldr	r0, [pc, #88]	; (8003468 <DHT11_ReadBit+0x74>)
 8003410:	f7fe f82e 	bl	8001470 <HAL_GPIO_ReadPin>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <DHT11_ReadBit+0x2c>
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	2b63      	cmp	r3, #99	; 0x63
 800341e:	d9ef      	bls.n	8003400 <DHT11_ReadBit+0xc>
	}
	retry = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//等待变为高电平
 8003424:	e005      	b.n	8003432 <DHT11_ReadBit+0x3e>
	{
		retry++;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	3301      	adds	r3, #1
 800342a:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800342c:	2001      	movs	r0, #1
 800342e:	f7ff ff2b 	bl	8003288 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOA, DHT11_Pin) && retry < 100)	//等待变为高电平
 8003432:	2104      	movs	r1, #4
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <DHT11_ReadBit+0x74>)
 8003436:	f7fe f81b 	bl	8001470 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <DHT11_ReadBit+0x52>
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	2b63      	cmp	r3, #99	; 0x63
 8003444:	d9ef      	bls.n	8003426 <DHT11_ReadBit+0x32>
	}
	delay_us(40);	//等待40us，判断高低电平，既数据1或0
 8003446:	2028      	movs	r0, #40	; 0x28
 8003448:	f7ff ff1e 	bl	8003288 <delay_us>
	if(HAL_GPIO_ReadPin(GPIOA, DHT11_Pin))
 800344c:	2104      	movs	r1, #4
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <DHT11_ReadBit+0x74>)
 8003450:	f7fe f80e 	bl	8001470 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <DHT11_ReadBit+0x6a>
		return 1;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <DHT11_ReadBit+0x6c>
	else
		return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40020000 	.word	0x40020000

0800346c <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void)	//从DHT11里读取一个字节，返回读到的数据
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
	uint8_t i , dat;
	dat = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	e00c      	b.n	8003496 <DHT11_ReadByte+0x2a>
	{
		dat <<= 1;
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	71bb      	strb	r3, [r7, #6]
		dat |= DHT11_ReadBit();
 8003482:	f7ff ffb7 	bl	80033f4 <DHT11_ReadBit>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	79bb      	ldrb	r3, [r7, #6]
 800348c:	4313      	orrs	r3, r2
 800348e:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8; i++)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	3301      	adds	r3, #1
 8003494:	71fb      	strb	r3, [r7, #7]
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	2b07      	cmp	r3, #7
 800349a:	d9ef      	bls.n	800347c <DHT11_ReadByte+0x10>
	}
	return dat;
 800349c:	79bb      	ldrb	r3, [r7, #6]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <DHT11_Init>:

uint8_t DHT11_Init(void)	//DHT11初始化
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0
	DHT11_RST();	//DHT11端口复位，发出起始信号
 80034aa:	f7ff ff4f 	bl	800334c <DHT11_RST>
	return DHT11_Check();	//等待DHT11回应
 80034ae:	f7ff ff65 	bl	800337c <DHT11_Check>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <DHT11_ReadData>:

uint8_t DHT11_ReadData(uint8_t *h)	//读取一次数据
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	DHT11_RST();	//DHT11端口复位，发出起始信号
 80034c0:	f7ff ff44 	bl	800334c <DHT11_RST>
	if(DHT11_Check() == 0)	//等待DHT11响应
 80034c4:	f7ff ff5a 	bl	800337c <DHT11_Check>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d127      	bne.n	800351e <DHT11_ReadData+0x66>
	{
		for(i = 0;i < 5;i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e00c      	b.n	80034ee <DHT11_ReadData+0x36>
			buf[i] = DHT11_ReadByte();
 80034d4:	7bfc      	ldrb	r4, [r7, #15]
 80034d6:	f7ff ffc9 	bl	800346c <DHT11_ReadByte>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	4423      	add	r3, r4
 80034e4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i = 0;i < 5;i++)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d9ef      	bls.n	80034d4 <DHT11_ReadData+0x1c>
		if((buf[0] + buf[1] +buf[2] +buf[3]) == buf[4])	//数据检验
 80034f4:	7a3b      	ldrb	r3, [r7, #8]
 80034f6:	461a      	mov	r2, r3
 80034f8:	7a7b      	ldrb	r3, [r7, #9]
 80034fa:	4413      	add	r3, r2
 80034fc:	7aba      	ldrb	r2, [r7, #10]
 80034fe:	4413      	add	r3, r2
 8003500:	7afa      	ldrb	r2, [r7, #11]
 8003502:	4413      	add	r3, r2
 8003504:	7b3a      	ldrb	r2, [r7, #12]
 8003506:	4293      	cmp	r3, r2
 8003508:	d10b      	bne.n	8003522 <DHT11_ReadData+0x6a>
		{
			*h = buf[0];	//将湿度值放入指针1
 800350a:	7a3a      	ldrb	r2, [r7, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	701a      	strb	r2, [r3, #0]
			h++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3301      	adds	r3, #1
 8003514:	607b      	str	r3, [r7, #4]
			*h = buf[2];	//将温度值放入指针2
 8003516:	7aba      	ldrb	r2, [r7, #10]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <DHT11_ReadData+0x6a>
		}
	}
	else return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <DHT11_ReadData+0x6c>
	return 0;
 8003522:	2300      	movs	r3, #0

}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}

0800352c <HAL_UART_RxCpltCallback>:
uint8_t  USART1_RX_BUF[USART1_REC_LEN];	//接收缓冲，最大USART1_REC_LEN个字节，在usart.h使用宏定义为200
uint16_t USART1_RX_STA = 0;		//接收状态标记，bit15接收完成标志，bit14接收到0x0d（回车），bit13~0为接收到的有效字节数目
uint8_t  USART1_NewData;	//当前串口中断接收的1个字节数据的缓存

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//串口中断回调函数
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)	//判断串口来源（串口1，USB转串口）
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <HAL_UART_RxCpltCallback+0xb0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d14a      	bne.n	80035d2 <HAL_UART_RxCpltCallback+0xa6>
	{
		RetargetInit(&huart1);	//重定向初始化串口1，否者下一步printf找不到输出地址
 800353c:	4827      	ldr	r0, [pc, #156]	; (80035dc <HAL_UART_RxCpltCallback+0xb0>)
 800353e:	f7fd f95d 	bl	80007fc <RetargetInit>
		printf("%c",USART1_NewData);	//把接收到的数据以符号变量的形式发送回电脑（输出）
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_UART_RxCpltCallback+0xb4>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f89a 	bl	8003680 <putchar>
		if((USART1_RX_STA & 0x8000) == 0)	//接收未完成
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b21b      	sxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	db38      	blt.n	80035c8 <HAL_UART_RxCpltCallback+0x9c>
		{
			if(USART1_RX_STA&0x4000)	//接收到0x0d
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d011      	beq.n	8003586 <HAL_UART_RxCpltCallback+0x5a>
			{
				if(USART1_NewData != 0x0a)	//0x0a表示换行
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_UART_RxCpltCallback+0xb4>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b0a      	cmp	r3, #10
 8003568:	d003      	beq.n	8003572 <HAL_UART_RxCpltCallback+0x46>
					USART1_RX_STA = 0;	//接收错误，重新开始
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 800356c:	2200      	movs	r2, #0
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	e02a      	b.n	80035c8 <HAL_UART_RxCpltCallback+0x9c>
				else USART1_RX_STA |=0x8000;
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	e020      	b.n	80035c8 <HAL_UART_RxCpltCallback+0x9c>
			}
			else	//还没接收到0x0d
			{
				if(USART1_NewData == 0x0d)
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_UART_RxCpltCallback+0xb4>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b0d      	cmp	r3, #13
 800358c:	d107      	bne.n	800359e <HAL_UART_RxCpltCallback+0x72>
					USART1_RX_STA |= 0x4000;
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003596:	b29a      	uxth	r2, r3
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	e014      	b.n	80035c8 <HAL_UART_RxCpltCallback+0x9c>
				else
				{
					USART1_RX_BUF[USART1_RX_STA&0x3FFF] = USART1_NewData;	//将收到的数据放入数组
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <HAL_UART_RxCpltCallback+0xb4>)
 80035a8:	7811      	ldrb	r1, [r2, #0]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_UART_RxCpltCallback+0xbc>)
 80035ac:	54d1      	strb	r1, [r2, r3]
					USART1_RX_STA++;	//数据长度计数加一
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 80035b8:	801a      	strh	r2, [r3, #0]
					if(USART1_RX_STA > (USART1_REC_LEN-1))
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_RxCpltCallback+0x9c>
						USART1_RX_STA = 0;	//接收数据错误，重新开始接收
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_UART_RxCpltCallback+0xb8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);	//再开启接收中断
 80035c8:	2201      	movs	r2, #1
 80035ca:	4905      	ldr	r1, [pc, #20]	; (80035e0 <HAL_UART_RxCpltCallback+0xb4>)
 80035cc:	4803      	ldr	r0, [pc, #12]	; (80035dc <HAL_UART_RxCpltCallback+0xb0>)
 80035ce:	f7fe ff72 	bl	80024b6 <HAL_UART_Receive_IT>
	}
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200000e8 	.word	0x200000e8
 80035e0:	20000130 	.word	0x20000130
 80035e4:	20000090 	.word	0x20000090
 80035e8:	20000134 	.word	0x20000134

080035ec <__errno>:
 80035ec:	4b01      	ldr	r3, [pc, #4]	; (80035f4 <__errno+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000000c 	.word	0x2000000c

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4d0d      	ldr	r5, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2600      	movs	r6, #0
 8003604:	42a6      	cmp	r6, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4d0b      	ldr	r5, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f001 f8a2 	bl	8004754 <_init>
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2600      	movs	r6, #0
 8003616:	42a6      	cmp	r6, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003620:	4798      	blx	r3
 8003622:	3601      	adds	r6, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f855 3b04 	ldr.w	r3, [r5], #4
 800362a:	4798      	blx	r3
 800362c:	3601      	adds	r6, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	0800483c 	.word	0x0800483c
 8003634:	0800483c 	.word	0x0800483c
 8003638:	0800483c 	.word	0x0800483c
 800363c:	08004840 	.word	0x08004840

08003640 <memset>:
 8003640:	4402      	add	r2, r0
 8003642:	4603      	mov	r3, r0
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	f803 1b01 	strb.w	r1, [r3], #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <iprintf>:
 8003650:	b40f      	push	{r0, r1, r2, r3}
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <iprintf+0x2c>)
 8003654:	b513      	push	{r0, r1, r4, lr}
 8003656:	681c      	ldr	r4, [r3, #0]
 8003658:	b124      	cbz	r4, 8003664 <iprintf+0x14>
 800365a:	69a3      	ldr	r3, [r4, #24]
 800365c:	b913      	cbnz	r3, 8003664 <iprintf+0x14>
 800365e:	4620      	mov	r0, r4
 8003660:	f000 fac4 	bl	8003bec <__sinit>
 8003664:	ab05      	add	r3, sp, #20
 8003666:	9a04      	ldr	r2, [sp, #16]
 8003668:	68a1      	ldr	r1, [r4, #8]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	4620      	mov	r0, r4
 800366e:	f000 fc9d 	bl	8003fac <_vfiprintf_r>
 8003672:	b002      	add	sp, #8
 8003674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003678:	b004      	add	sp, #16
 800367a:	4770      	bx	lr
 800367c:	2000000c 	.word	0x2000000c

08003680 <putchar>:
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <putchar+0x28>)
 8003682:	b513      	push	{r0, r1, r4, lr}
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	4601      	mov	r1, r0
 8003688:	b134      	cbz	r4, 8003698 <putchar+0x18>
 800368a:	69a3      	ldr	r3, [r4, #24]
 800368c:	b923      	cbnz	r3, 8003698 <putchar+0x18>
 800368e:	9001      	str	r0, [sp, #4]
 8003690:	4620      	mov	r0, r4
 8003692:	f000 faab 	bl	8003bec <__sinit>
 8003696:	9901      	ldr	r1, [sp, #4]
 8003698:	68a2      	ldr	r2, [r4, #8]
 800369a:	4620      	mov	r0, r4
 800369c:	b002      	add	sp, #8
 800369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a2:	f000 bf47 	b.w	8004534 <_putc_r>
 80036a6:	bf00      	nop
 80036a8:	2000000c 	.word	0x2000000c

080036ac <setvbuf>:
 80036ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036b0:	461d      	mov	r5, r3
 80036b2:	4b5d      	ldr	r3, [pc, #372]	; (8003828 <setvbuf+0x17c>)
 80036b4:	681f      	ldr	r7, [r3, #0]
 80036b6:	4604      	mov	r4, r0
 80036b8:	460e      	mov	r6, r1
 80036ba:	4690      	mov	r8, r2
 80036bc:	b127      	cbz	r7, 80036c8 <setvbuf+0x1c>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	b913      	cbnz	r3, 80036c8 <setvbuf+0x1c>
 80036c2:	4638      	mov	r0, r7
 80036c4:	f000 fa92 	bl	8003bec <__sinit>
 80036c8:	4b58      	ldr	r3, [pc, #352]	; (800382c <setvbuf+0x180>)
 80036ca:	429c      	cmp	r4, r3
 80036cc:	d167      	bne.n	800379e <setvbuf+0xf2>
 80036ce:	687c      	ldr	r4, [r7, #4]
 80036d0:	f1b8 0f02 	cmp.w	r8, #2
 80036d4:	d006      	beq.n	80036e4 <setvbuf+0x38>
 80036d6:	f1b8 0f01 	cmp.w	r8, #1
 80036da:	f200 809f 	bhi.w	800381c <setvbuf+0x170>
 80036de:	2d00      	cmp	r5, #0
 80036e0:	f2c0 809c 	blt.w	800381c <setvbuf+0x170>
 80036e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036e6:	07db      	lsls	r3, r3, #31
 80036e8:	d405      	bmi.n	80036f6 <setvbuf+0x4a>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	0598      	lsls	r0, r3, #22
 80036ee:	d402      	bmi.n	80036f6 <setvbuf+0x4a>
 80036f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036f2:	f000 fb19 	bl	8003d28 <__retarget_lock_acquire_recursive>
 80036f6:	4621      	mov	r1, r4
 80036f8:	4638      	mov	r0, r7
 80036fa:	f000 f9e3 	bl	8003ac4 <_fflush_r>
 80036fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003700:	b141      	cbz	r1, 8003714 <setvbuf+0x68>
 8003702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003706:	4299      	cmp	r1, r3
 8003708:	d002      	beq.n	8003710 <setvbuf+0x64>
 800370a:	4638      	mov	r0, r7
 800370c:	f000 fb7a 	bl	8003e04 <_free_r>
 8003710:	2300      	movs	r3, #0
 8003712:	6363      	str	r3, [r4, #52]	; 0x34
 8003714:	2300      	movs	r3, #0
 8003716:	61a3      	str	r3, [r4, #24]
 8003718:	6063      	str	r3, [r4, #4]
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	0619      	lsls	r1, r3, #24
 800371e:	d503      	bpl.n	8003728 <setvbuf+0x7c>
 8003720:	6921      	ldr	r1, [r4, #16]
 8003722:	4638      	mov	r0, r7
 8003724:	f000 fb6e 	bl	8003e04 <_free_r>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	f1b8 0f02 	cmp.w	r8, #2
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	d06c      	beq.n	8003814 <setvbuf+0x168>
 800373a:	ab01      	add	r3, sp, #4
 800373c:	466a      	mov	r2, sp
 800373e:	4621      	mov	r1, r4
 8003740:	4638      	mov	r0, r7
 8003742:	f000 faf3 	bl	8003d2c <__swhatbuf_r>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	4318      	orrs	r0, r3
 800374a:	81a0      	strh	r0, [r4, #12]
 800374c:	2d00      	cmp	r5, #0
 800374e:	d130      	bne.n	80037b2 <setvbuf+0x106>
 8003750:	9d00      	ldr	r5, [sp, #0]
 8003752:	4628      	mov	r0, r5
 8003754:	f000 fb4e 	bl	8003df4 <malloc>
 8003758:	4606      	mov	r6, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	d155      	bne.n	800380a <setvbuf+0x15e>
 800375e:	f8dd 9000 	ldr.w	r9, [sp]
 8003762:	45a9      	cmp	r9, r5
 8003764:	d14a      	bne.n	80037fc <setvbuf+0x150>
 8003766:	f04f 35ff 	mov.w	r5, #4294967295
 800376a:	2200      	movs	r2, #0
 800376c:	60a2      	str	r2, [r4, #8]
 800376e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003772:	6022      	str	r2, [r4, #0]
 8003774:	6122      	str	r2, [r4, #16]
 8003776:	2201      	movs	r2, #1
 8003778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377c:	6162      	str	r2, [r4, #20]
 800377e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	07d2      	lsls	r2, r2, #31
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	d405      	bmi.n	8003796 <setvbuf+0xea>
 800378a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800378e:	d102      	bne.n	8003796 <setvbuf+0xea>
 8003790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003792:	f000 faca 	bl	8003d2a <__retarget_lock_release_recursive>
 8003796:	4628      	mov	r0, r5
 8003798:	b003      	add	sp, #12
 800379a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <setvbuf+0x184>)
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d101      	bne.n	80037a8 <setvbuf+0xfc>
 80037a4:	68bc      	ldr	r4, [r7, #8]
 80037a6:	e793      	b.n	80036d0 <setvbuf+0x24>
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <setvbuf+0x188>)
 80037aa:	429c      	cmp	r4, r3
 80037ac:	bf08      	it	eq
 80037ae:	68fc      	ldreq	r4, [r7, #12]
 80037b0:	e78e      	b.n	80036d0 <setvbuf+0x24>
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d0cd      	beq.n	8003752 <setvbuf+0xa6>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	b913      	cbnz	r3, 80037c0 <setvbuf+0x114>
 80037ba:	4638      	mov	r0, r7
 80037bc:	f000 fa16 	bl	8003bec <__sinit>
 80037c0:	f1b8 0f01 	cmp.w	r8, #1
 80037c4:	bf08      	it	eq
 80037c6:	89a3      	ldrheq	r3, [r4, #12]
 80037c8:	6026      	str	r6, [r4, #0]
 80037ca:	bf04      	itt	eq
 80037cc:	f043 0301 	orreq.w	r3, r3, #1
 80037d0:	81a3      	strheq	r3, [r4, #12]
 80037d2:	89a2      	ldrh	r2, [r4, #12]
 80037d4:	f012 0308 	ands.w	r3, r2, #8
 80037d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80037dc:	d01c      	beq.n	8003818 <setvbuf+0x16c>
 80037de:	07d3      	lsls	r3, r2, #31
 80037e0:	bf41      	itttt	mi
 80037e2:	2300      	movmi	r3, #0
 80037e4:	426d      	negmi	r5, r5
 80037e6:	60a3      	strmi	r3, [r4, #8]
 80037e8:	61a5      	strmi	r5, [r4, #24]
 80037ea:	bf58      	it	pl
 80037ec:	60a5      	strpl	r5, [r4, #8]
 80037ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80037f0:	f015 0501 	ands.w	r5, r5, #1
 80037f4:	d115      	bne.n	8003822 <setvbuf+0x176>
 80037f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80037fa:	e7c8      	b.n	800378e <setvbuf+0xe2>
 80037fc:	4648      	mov	r0, r9
 80037fe:	f000 faf9 	bl	8003df4 <malloc>
 8003802:	4606      	mov	r6, r0
 8003804:	2800      	cmp	r0, #0
 8003806:	d0ae      	beq.n	8003766 <setvbuf+0xba>
 8003808:	464d      	mov	r5, r9
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7d0      	b.n	80037b6 <setvbuf+0x10a>
 8003814:	2500      	movs	r5, #0
 8003816:	e7a8      	b.n	800376a <setvbuf+0xbe>
 8003818:	60a3      	str	r3, [r4, #8]
 800381a:	e7e8      	b.n	80037ee <setvbuf+0x142>
 800381c:	f04f 35ff 	mov.w	r5, #4294967295
 8003820:	e7b9      	b.n	8003796 <setvbuf+0xea>
 8003822:	2500      	movs	r5, #0
 8003824:	e7b7      	b.n	8003796 <setvbuf+0xea>
 8003826:	bf00      	nop
 8003828:	2000000c 	.word	0x2000000c
 800382c:	080047c0 	.word	0x080047c0
 8003830:	080047e0 	.word	0x080047e0
 8003834:	080047a0 	.word	0x080047a0

08003838 <__swbuf_r>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	460e      	mov	r6, r1
 800383c:	4614      	mov	r4, r2
 800383e:	4605      	mov	r5, r0
 8003840:	b118      	cbz	r0, 800384a <__swbuf_r+0x12>
 8003842:	6983      	ldr	r3, [r0, #24]
 8003844:	b90b      	cbnz	r3, 800384a <__swbuf_r+0x12>
 8003846:	f000 f9d1 	bl	8003bec <__sinit>
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <__swbuf_r+0x98>)
 800384c:	429c      	cmp	r4, r3
 800384e:	d12b      	bne.n	80038a8 <__swbuf_r+0x70>
 8003850:	686c      	ldr	r4, [r5, #4]
 8003852:	69a3      	ldr	r3, [r4, #24]
 8003854:	60a3      	str	r3, [r4, #8]
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	071a      	lsls	r2, r3, #28
 800385a:	d52f      	bpl.n	80038bc <__swbuf_r+0x84>
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	b36b      	cbz	r3, 80038bc <__swbuf_r+0x84>
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	1ac0      	subs	r0, r0, r3
 8003866:	6963      	ldr	r3, [r4, #20]
 8003868:	b2f6      	uxtb	r6, r6
 800386a:	4283      	cmp	r3, r0
 800386c:	4637      	mov	r7, r6
 800386e:	dc04      	bgt.n	800387a <__swbuf_r+0x42>
 8003870:	4621      	mov	r1, r4
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f926 	bl	8003ac4 <_fflush_r>
 8003878:	bb30      	cbnz	r0, 80038c8 <__swbuf_r+0x90>
 800387a:	68a3      	ldr	r3, [r4, #8]
 800387c:	3b01      	subs	r3, #1
 800387e:	60a3      	str	r3, [r4, #8]
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	6022      	str	r2, [r4, #0]
 8003886:	701e      	strb	r6, [r3, #0]
 8003888:	6963      	ldr	r3, [r4, #20]
 800388a:	3001      	adds	r0, #1
 800388c:	4283      	cmp	r3, r0
 800388e:	d004      	beq.n	800389a <__swbuf_r+0x62>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	07db      	lsls	r3, r3, #31
 8003894:	d506      	bpl.n	80038a4 <__swbuf_r+0x6c>
 8003896:	2e0a      	cmp	r6, #10
 8003898:	d104      	bne.n	80038a4 <__swbuf_r+0x6c>
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
 800389e:	f000 f911 	bl	8003ac4 <_fflush_r>
 80038a2:	b988      	cbnz	r0, 80038c8 <__swbuf_r+0x90>
 80038a4:	4638      	mov	r0, r7
 80038a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <__swbuf_r+0x9c>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d101      	bne.n	80038b2 <__swbuf_r+0x7a>
 80038ae:	68ac      	ldr	r4, [r5, #8]
 80038b0:	e7cf      	b.n	8003852 <__swbuf_r+0x1a>
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <__swbuf_r+0xa0>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	bf08      	it	eq
 80038b8:	68ec      	ldreq	r4, [r5, #12]
 80038ba:	e7ca      	b.n	8003852 <__swbuf_r+0x1a>
 80038bc:	4621      	mov	r1, r4
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f80c 	bl	80038dc <__swsetup_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d0cb      	beq.n	8003860 <__swbuf_r+0x28>
 80038c8:	f04f 37ff 	mov.w	r7, #4294967295
 80038cc:	e7ea      	b.n	80038a4 <__swbuf_r+0x6c>
 80038ce:	bf00      	nop
 80038d0:	080047c0 	.word	0x080047c0
 80038d4:	080047e0 	.word	0x080047e0
 80038d8:	080047a0 	.word	0x080047a0

080038dc <__swsetup_r>:
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <__swsetup_r+0xcc>)
 80038de:	b570      	push	{r4, r5, r6, lr}
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	4606      	mov	r6, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	b125      	cbz	r5, 80038f2 <__swsetup_r+0x16>
 80038e8:	69ab      	ldr	r3, [r5, #24]
 80038ea:	b913      	cbnz	r3, 80038f2 <__swsetup_r+0x16>
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 f97d 	bl	8003bec <__sinit>
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <__swsetup_r+0xd0>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d10f      	bne.n	8003918 <__swsetup_r+0x3c>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003900:	0719      	lsls	r1, r3, #28
 8003902:	d42c      	bmi.n	800395e <__swsetup_r+0x82>
 8003904:	06dd      	lsls	r5, r3, #27
 8003906:	d411      	bmi.n	800392c <__swsetup_r+0x50>
 8003908:	2309      	movs	r3, #9
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	f04f 30ff 	mov.w	r0, #4294967295
 8003916:	e03e      	b.n	8003996 <__swsetup_r+0xba>
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <__swsetup_r+0xd4>)
 800391a:	429c      	cmp	r4, r3
 800391c:	d101      	bne.n	8003922 <__swsetup_r+0x46>
 800391e:	68ac      	ldr	r4, [r5, #8]
 8003920:	e7eb      	b.n	80038fa <__swsetup_r+0x1e>
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <__swsetup_r+0xd8>)
 8003924:	429c      	cmp	r4, r3
 8003926:	bf08      	it	eq
 8003928:	68ec      	ldreq	r4, [r5, #12]
 800392a:	e7e6      	b.n	80038fa <__swsetup_r+0x1e>
 800392c:	0758      	lsls	r0, r3, #29
 800392e:	d512      	bpl.n	8003956 <__swsetup_r+0x7a>
 8003930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003932:	b141      	cbz	r1, 8003946 <__swsetup_r+0x6a>
 8003934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003938:	4299      	cmp	r1, r3
 800393a:	d002      	beq.n	8003942 <__swsetup_r+0x66>
 800393c:	4630      	mov	r0, r6
 800393e:	f000 fa61 	bl	8003e04 <_free_r>
 8003942:	2300      	movs	r3, #0
 8003944:	6363      	str	r3, [r4, #52]	; 0x34
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	2300      	movs	r3, #0
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	b94b      	cbnz	r3, 8003976 <__swsetup_r+0x9a>
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396c:	d003      	beq.n	8003976 <__swsetup_r+0x9a>
 800396e:	4621      	mov	r1, r4
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f9ff 	bl	8003d74 <__smakebuf_r>
 8003976:	89a0      	ldrh	r0, [r4, #12]
 8003978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800397c:	f010 0301 	ands.w	r3, r0, #1
 8003980:	d00a      	beq.n	8003998 <__swsetup_r+0xbc>
 8003982:	2300      	movs	r3, #0
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	6963      	ldr	r3, [r4, #20]
 8003988:	425b      	negs	r3, r3
 800398a:	61a3      	str	r3, [r4, #24]
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	b943      	cbnz	r3, 80039a2 <__swsetup_r+0xc6>
 8003990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003994:	d1ba      	bne.n	800390c <__swsetup_r+0x30>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	0781      	lsls	r1, r0, #30
 800399a:	bf58      	it	pl
 800399c:	6963      	ldrpl	r3, [r4, #20]
 800399e:	60a3      	str	r3, [r4, #8]
 80039a0:	e7f4      	b.n	800398c <__swsetup_r+0xb0>
 80039a2:	2000      	movs	r0, #0
 80039a4:	e7f7      	b.n	8003996 <__swsetup_r+0xba>
 80039a6:	bf00      	nop
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	080047c0 	.word	0x080047c0
 80039b0:	080047e0 	.word	0x080047e0
 80039b4:	080047a0 	.word	0x080047a0

080039b8 <__sflush_r>:
 80039b8:	898a      	ldrh	r2, [r1, #12]
 80039ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039be:	4605      	mov	r5, r0
 80039c0:	0710      	lsls	r0, r2, #28
 80039c2:	460c      	mov	r4, r1
 80039c4:	d458      	bmi.n	8003a78 <__sflush_r+0xc0>
 80039c6:	684b      	ldr	r3, [r1, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dc05      	bgt.n	80039d8 <__sflush_r+0x20>
 80039cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	dc02      	bgt.n	80039d8 <__sflush_r+0x20>
 80039d2:	2000      	movs	r0, #0
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d0f9      	beq.n	80039d2 <__sflush_r+0x1a>
 80039de:	2300      	movs	r3, #0
 80039e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039e4:	682f      	ldr	r7, [r5, #0]
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	d032      	beq.n	8003a50 <__sflush_r+0x98>
 80039ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	075a      	lsls	r2, r3, #29
 80039f0:	d505      	bpl.n	80039fe <__sflush_r+0x46>
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	1ac0      	subs	r0, r0, r3
 80039f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039f8:	b10b      	cbz	r3, 80039fe <__sflush_r+0x46>
 80039fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039fc:	1ac0      	subs	r0, r0, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	4602      	mov	r2, r0
 8003a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	4628      	mov	r0, r5
 8003a08:	47b0      	blx	r6
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	d106      	bne.n	8003a1e <__sflush_r+0x66>
 8003a10:	6829      	ldr	r1, [r5, #0]
 8003a12:	291d      	cmp	r1, #29
 8003a14:	d82c      	bhi.n	8003a70 <__sflush_r+0xb8>
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <__sflush_r+0x108>)
 8003a18:	40ca      	lsrs	r2, r1
 8003a1a:	07d6      	lsls	r6, r2, #31
 8003a1c:	d528      	bpl.n	8003a70 <__sflush_r+0xb8>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	6062      	str	r2, [r4, #4]
 8003a22:	04d9      	lsls	r1, r3, #19
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	d504      	bpl.n	8003a34 <__sflush_r+0x7c>
 8003a2a:	1c42      	adds	r2, r0, #1
 8003a2c:	d101      	bne.n	8003a32 <__sflush_r+0x7a>
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	b903      	cbnz	r3, 8003a34 <__sflush_r+0x7c>
 8003a32:	6560      	str	r0, [r4, #84]	; 0x54
 8003a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d0ca      	beq.n	80039d2 <__sflush_r+0x1a>
 8003a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a40:	4299      	cmp	r1, r3
 8003a42:	d002      	beq.n	8003a4a <__sflush_r+0x92>
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f9dd 	bl	8003e04 <_free_r>
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8003a4e:	e7c1      	b.n	80039d4 <__sflush_r+0x1c>
 8003a50:	6a21      	ldr	r1, [r4, #32]
 8003a52:	2301      	movs	r3, #1
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b0      	blx	r6
 8003a58:	1c41      	adds	r1, r0, #1
 8003a5a:	d1c7      	bne.n	80039ec <__sflush_r+0x34>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0c4      	beq.n	80039ec <__sflush_r+0x34>
 8003a62:	2b1d      	cmp	r3, #29
 8003a64:	d001      	beq.n	8003a6a <__sflush_r+0xb2>
 8003a66:	2b16      	cmp	r3, #22
 8003a68:	d101      	bne.n	8003a6e <__sflush_r+0xb6>
 8003a6a:	602f      	str	r7, [r5, #0]
 8003a6c:	e7b1      	b.n	80039d2 <__sflush_r+0x1a>
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a74:	81a3      	strh	r3, [r4, #12]
 8003a76:	e7ad      	b.n	80039d4 <__sflush_r+0x1c>
 8003a78:	690f      	ldr	r7, [r1, #16]
 8003a7a:	2f00      	cmp	r7, #0
 8003a7c:	d0a9      	beq.n	80039d2 <__sflush_r+0x1a>
 8003a7e:	0793      	lsls	r3, r2, #30
 8003a80:	680e      	ldr	r6, [r1, #0]
 8003a82:	bf08      	it	eq
 8003a84:	694b      	ldreq	r3, [r1, #20]
 8003a86:	600f      	str	r7, [r1, #0]
 8003a88:	bf18      	it	ne
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	eba6 0807 	sub.w	r8, r6, r7
 8003a90:	608b      	str	r3, [r1, #8]
 8003a92:	f1b8 0f00 	cmp.w	r8, #0
 8003a96:	dd9c      	ble.n	80039d2 <__sflush_r+0x1a>
 8003a98:	6a21      	ldr	r1, [r4, #32]
 8003a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a9c:	4643      	mov	r3, r8
 8003a9e:	463a      	mov	r2, r7
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b0      	blx	r6
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	dc06      	bgt.n	8003ab6 <__sflush_r+0xfe>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	e78e      	b.n	80039d4 <__sflush_r+0x1c>
 8003ab6:	4407      	add	r7, r0
 8003ab8:	eba8 0800 	sub.w	r8, r8, r0
 8003abc:	e7e9      	b.n	8003a92 <__sflush_r+0xda>
 8003abe:	bf00      	nop
 8003ac0:	20400001 	.word	0x20400001

08003ac4 <_fflush_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	b913      	cbnz	r3, 8003ad4 <_fflush_r+0x10>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	b118      	cbz	r0, 8003ade <_fflush_r+0x1a>
 8003ad6:	6983      	ldr	r3, [r0, #24]
 8003ad8:	b90b      	cbnz	r3, 8003ade <_fflush_r+0x1a>
 8003ada:	f000 f887 	bl	8003bec <__sinit>
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <_fflush_r+0x6c>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d11b      	bne.n	8003b1c <_fflush_r+0x58>
 8003ae4:	686c      	ldr	r4, [r5, #4]
 8003ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ef      	beq.n	8003ace <_fflush_r+0xa>
 8003aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003af0:	07d0      	lsls	r0, r2, #31
 8003af2:	d404      	bmi.n	8003afe <_fflush_r+0x3a>
 8003af4:	0599      	lsls	r1, r3, #22
 8003af6:	d402      	bmi.n	8003afe <_fflush_r+0x3a>
 8003af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003afa:	f000 f915 	bl	8003d28 <__retarget_lock_acquire_recursive>
 8003afe:	4628      	mov	r0, r5
 8003b00:	4621      	mov	r1, r4
 8003b02:	f7ff ff59 	bl	80039b8 <__sflush_r>
 8003b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b08:	07da      	lsls	r2, r3, #31
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	d4e0      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	059b      	lsls	r3, r3, #22
 8003b12:	d4dd      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b16:	f000 f908 	bl	8003d2a <__retarget_lock_release_recursive>
 8003b1a:	e7d9      	b.n	8003ad0 <_fflush_r+0xc>
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <_fflush_r+0x70>)
 8003b1e:	429c      	cmp	r4, r3
 8003b20:	d101      	bne.n	8003b26 <_fflush_r+0x62>
 8003b22:	68ac      	ldr	r4, [r5, #8]
 8003b24:	e7df      	b.n	8003ae6 <_fflush_r+0x22>
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <_fflush_r+0x74>)
 8003b28:	429c      	cmp	r4, r3
 8003b2a:	bf08      	it	eq
 8003b2c:	68ec      	ldreq	r4, [r5, #12]
 8003b2e:	e7da      	b.n	8003ae6 <_fflush_r+0x22>
 8003b30:	080047c0 	.word	0x080047c0
 8003b34:	080047e0 	.word	0x080047e0
 8003b38:	080047a0 	.word	0x080047a0

08003b3c <std>:
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	4604      	mov	r4, r0
 8003b42:	e9c0 3300 	strd	r3, r3, [r0]
 8003b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b4a:	6083      	str	r3, [r0, #8]
 8003b4c:	8181      	strh	r1, [r0, #12]
 8003b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b50:	81c2      	strh	r2, [r0, #14]
 8003b52:	6183      	str	r3, [r0, #24]
 8003b54:	4619      	mov	r1, r3
 8003b56:	2208      	movs	r2, #8
 8003b58:	305c      	adds	r0, #92	; 0x5c
 8003b5a:	f7ff fd71 	bl	8003640 <memset>
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <std+0x38>)
 8003b60:	6263      	str	r3, [r4, #36]	; 0x24
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <std+0x3c>)
 8003b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <std+0x40>)
 8003b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <std+0x44>)
 8003b6c:	6224      	str	r4, [r4, #32]
 8003b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	bf00      	nop
 8003b74:	080045e5 	.word	0x080045e5
 8003b78:	08004607 	.word	0x08004607
 8003b7c:	0800463f 	.word	0x0800463f
 8003b80:	08004663 	.word	0x08004663

08003b84 <_cleanup_r>:
 8003b84:	4901      	ldr	r1, [pc, #4]	; (8003b8c <_cleanup_r+0x8>)
 8003b86:	f000 b8af 	b.w	8003ce8 <_fwalk_reent>
 8003b8a:	bf00      	nop
 8003b8c:	08003ac5 	.word	0x08003ac5

08003b90 <__sfmoreglue>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	1e4a      	subs	r2, r1, #1
 8003b94:	2568      	movs	r5, #104	; 0x68
 8003b96:	4355      	muls	r5, r2
 8003b98:	460e      	mov	r6, r1
 8003b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b9e:	f000 f981 	bl	8003ea4 <_malloc_r>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b140      	cbz	r0, 8003bb8 <__sfmoreglue+0x28>
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8003bac:	300c      	adds	r0, #12
 8003bae:	60a0      	str	r0, [r4, #8]
 8003bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bb4:	f7ff fd44 	bl	8003640 <memset>
 8003bb8:	4620      	mov	r0, r4
 8003bba:	bd70      	pop	{r4, r5, r6, pc}

08003bbc <__sfp_lock_acquire>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__sfp_lock_acquire+0x8>)
 8003bbe:	f000 b8b3 	b.w	8003d28 <__retarget_lock_acquire_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	2000013d 	.word	0x2000013d

08003bc8 <__sfp_lock_release>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	; (8003bd0 <__sfp_lock_release+0x8>)
 8003bca:	f000 b8ae 	b.w	8003d2a <__retarget_lock_release_recursive>
 8003bce:	bf00      	nop
 8003bd0:	2000013d 	.word	0x2000013d

08003bd4 <__sinit_lock_acquire>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	; (8003bdc <__sinit_lock_acquire+0x8>)
 8003bd6:	f000 b8a7 	b.w	8003d28 <__retarget_lock_acquire_recursive>
 8003bda:	bf00      	nop
 8003bdc:	20000138 	.word	0x20000138

08003be0 <__sinit_lock_release>:
 8003be0:	4801      	ldr	r0, [pc, #4]	; (8003be8 <__sinit_lock_release+0x8>)
 8003be2:	f000 b8a2 	b.w	8003d2a <__retarget_lock_release_recursive>
 8003be6:	bf00      	nop
 8003be8:	20000138 	.word	0x20000138

08003bec <__sinit>:
 8003bec:	b510      	push	{r4, lr}
 8003bee:	4604      	mov	r4, r0
 8003bf0:	f7ff fff0 	bl	8003bd4 <__sinit_lock_acquire>
 8003bf4:	69a3      	ldr	r3, [r4, #24]
 8003bf6:	b11b      	cbz	r3, 8003c00 <__sinit+0x14>
 8003bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bfc:	f7ff bff0 	b.w	8003be0 <__sinit_lock_release>
 8003c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c04:	6523      	str	r3, [r4, #80]	; 0x50
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <__sinit+0x68>)
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <__sinit+0x6c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c0e:	42a3      	cmp	r3, r4
 8003c10:	bf04      	itt	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	61a3      	streq	r3, [r4, #24]
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f820 	bl	8003c5c <__sfp>
 8003c1c:	6060      	str	r0, [r4, #4]
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f81c 	bl	8003c5c <__sfp>
 8003c24:	60a0      	str	r0, [r4, #8]
 8003c26:	4620      	mov	r0, r4
 8003c28:	f000 f818 	bl	8003c5c <__sfp>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60e0      	str	r0, [r4, #12]
 8003c30:	2104      	movs	r1, #4
 8003c32:	6860      	ldr	r0, [r4, #4]
 8003c34:	f7ff ff82 	bl	8003b3c <std>
 8003c38:	68a0      	ldr	r0, [r4, #8]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	2109      	movs	r1, #9
 8003c3e:	f7ff ff7d 	bl	8003b3c <std>
 8003c42:	68e0      	ldr	r0, [r4, #12]
 8003c44:	2202      	movs	r2, #2
 8003c46:	2112      	movs	r1, #18
 8003c48:	f7ff ff78 	bl	8003b3c <std>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61a3      	str	r3, [r4, #24]
 8003c50:	e7d2      	b.n	8003bf8 <__sinit+0xc>
 8003c52:	bf00      	nop
 8003c54:	0800479c 	.word	0x0800479c
 8003c58:	08003b85 	.word	0x08003b85

08003c5c <__sfp>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	4607      	mov	r7, r0
 8003c60:	f7ff ffac 	bl	8003bbc <__sfp_lock_acquire>
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <__sfp+0x84>)
 8003c66:	681e      	ldr	r6, [r3, #0]
 8003c68:	69b3      	ldr	r3, [r6, #24]
 8003c6a:	b913      	cbnz	r3, 8003c72 <__sfp+0x16>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f7ff ffbd 	bl	8003bec <__sinit>
 8003c72:	3648      	adds	r6, #72	; 0x48
 8003c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	d503      	bpl.n	8003c84 <__sfp+0x28>
 8003c7c:	6833      	ldr	r3, [r6, #0]
 8003c7e:	b30b      	cbz	r3, 8003cc4 <__sfp+0x68>
 8003c80:	6836      	ldr	r6, [r6, #0]
 8003c82:	e7f7      	b.n	8003c74 <__sfp+0x18>
 8003c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c88:	b9d5      	cbnz	r5, 8003cc0 <__sfp+0x64>
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <__sfp+0x88>)
 8003c8c:	60e3      	str	r3, [r4, #12]
 8003c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c92:	6665      	str	r5, [r4, #100]	; 0x64
 8003c94:	f000 f847 	bl	8003d26 <__retarget_lock_init_recursive>
 8003c98:	f7ff ff96 	bl	8003bc8 <__sfp_lock_release>
 8003c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	61a5      	str	r5, [r4, #24]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	4629      	mov	r1, r5
 8003cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cb0:	f7ff fcc6 	bl	8003640 <memset>
 8003cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc0:	3468      	adds	r4, #104	; 0x68
 8003cc2:	e7d9      	b.n	8003c78 <__sfp+0x1c>
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f7ff ff62 	bl	8003b90 <__sfmoreglue>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	6030      	str	r0, [r6, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d1d5      	bne.n	8003c80 <__sfp+0x24>
 8003cd4:	f7ff ff78 	bl	8003bc8 <__sfp_lock_release>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	e7ee      	b.n	8003cbc <__sfp+0x60>
 8003cde:	bf00      	nop
 8003ce0:	0800479c 	.word	0x0800479c
 8003ce4:	ffff0001 	.word	0xffff0001

08003ce8 <_fwalk_reent>:
 8003ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cec:	4606      	mov	r6, r0
 8003cee:	4688      	mov	r8, r1
 8003cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cf4:	2700      	movs	r7, #0
 8003cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8003cfe:	d505      	bpl.n	8003d0c <_fwalk_reent+0x24>
 8003d00:	6824      	ldr	r4, [r4, #0]
 8003d02:	2c00      	cmp	r4, #0
 8003d04:	d1f7      	bne.n	8003cf6 <_fwalk_reent+0xe>
 8003d06:	4638      	mov	r0, r7
 8003d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0c:	89ab      	ldrh	r3, [r5, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d907      	bls.n	8003d22 <_fwalk_reent+0x3a>
 8003d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d16:	3301      	adds	r3, #1
 8003d18:	d003      	beq.n	8003d22 <_fwalk_reent+0x3a>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	47c0      	blx	r8
 8003d20:	4307      	orrs	r7, r0
 8003d22:	3568      	adds	r5, #104	; 0x68
 8003d24:	e7e9      	b.n	8003cfa <_fwalk_reent+0x12>

08003d26 <__retarget_lock_init_recursive>:
 8003d26:	4770      	bx	lr

08003d28 <__retarget_lock_acquire_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_release_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <__swhatbuf_r>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	460e      	mov	r6, r1
 8003d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d34:	2900      	cmp	r1, #0
 8003d36:	b096      	sub	sp, #88	; 0x58
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	da07      	bge.n	8003d4e <__swhatbuf_r+0x22>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	89b3      	ldrh	r3, [r6, #12]
 8003d44:	061a      	lsls	r2, r3, #24
 8003d46:	d410      	bmi.n	8003d6a <__swhatbuf_r+0x3e>
 8003d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4c:	e00e      	b.n	8003d6c <__swhatbuf_r+0x40>
 8003d4e:	466a      	mov	r2, sp
 8003d50:	f000 fcae 	bl	80046b0 <_fstat_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	dbf2      	blt.n	8003d3e <__swhatbuf_r+0x12>
 8003d58:	9a01      	ldr	r2, [sp, #4]
 8003d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d62:	425a      	negs	r2, r3
 8003d64:	415a      	adcs	r2, r3
 8003d66:	602a      	str	r2, [r5, #0]
 8003d68:	e7ee      	b.n	8003d48 <__swhatbuf_r+0x1c>
 8003d6a:	2340      	movs	r3, #64	; 0x40
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	b016      	add	sp, #88	; 0x58
 8003d72:	bd70      	pop	{r4, r5, r6, pc}

08003d74 <__smakebuf_r>:
 8003d74:	898b      	ldrh	r3, [r1, #12]
 8003d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d78:	079d      	lsls	r5, r3, #30
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	d507      	bpl.n	8003d90 <__smakebuf_r+0x1c>
 8003d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	6123      	str	r3, [r4, #16]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	6163      	str	r3, [r4, #20]
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	ab01      	add	r3, sp, #4
 8003d92:	466a      	mov	r2, sp
 8003d94:	f7ff ffca 	bl	8003d2c <__swhatbuf_r>
 8003d98:	9900      	ldr	r1, [sp, #0]
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f881 	bl	8003ea4 <_malloc_r>
 8003da2:	b948      	cbnz	r0, 8003db8 <__smakebuf_r+0x44>
 8003da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da8:	059a      	lsls	r2, r3, #22
 8003daa:	d4ef      	bmi.n	8003d8c <__smakebuf_r+0x18>
 8003dac:	f023 0303 	bic.w	r3, r3, #3
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	e7e3      	b.n	8003d80 <__smakebuf_r+0xc>
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <__smakebuf_r+0x7c>)
 8003dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	6020      	str	r0, [r4, #0]
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	9b00      	ldr	r3, [sp, #0]
 8003dc8:	6163      	str	r3, [r4, #20]
 8003dca:	9b01      	ldr	r3, [sp, #4]
 8003dcc:	6120      	str	r0, [r4, #16]
 8003dce:	b15b      	cbz	r3, 8003de8 <__smakebuf_r+0x74>
 8003dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 fc7d 	bl	80046d4 <_isatty_r>
 8003dda:	b128      	cbz	r0, 8003de8 <__smakebuf_r+0x74>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	89a0      	ldrh	r0, [r4, #12]
 8003dea:	4305      	orrs	r5, r0
 8003dec:	81a5      	strh	r5, [r4, #12]
 8003dee:	e7cd      	b.n	8003d8c <__smakebuf_r+0x18>
 8003df0:	08003b85 	.word	0x08003b85

08003df4 <malloc>:
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <malloc+0xc>)
 8003df6:	4601      	mov	r1, r0
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f000 b853 	b.w	8003ea4 <_malloc_r>
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <_free_r>:
 8003e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e06:	2900      	cmp	r1, #0
 8003e08:	d048      	beq.n	8003e9c <_free_r+0x98>
 8003e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e0e:	9001      	str	r0, [sp, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f1a1 0404 	sub.w	r4, r1, #4
 8003e16:	bfb8      	it	lt
 8003e18:	18e4      	addlt	r4, r4, r3
 8003e1a:	f000 fc7d 	bl	8004718 <__malloc_lock>
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <_free_r+0x9c>)
 8003e20:	9801      	ldr	r0, [sp, #4]
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	4615      	mov	r5, r2
 8003e26:	b933      	cbnz	r3, 8003e36 <_free_r+0x32>
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	6014      	str	r4, [r2, #0]
 8003e2c:	b003      	add	sp, #12
 8003e2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e32:	f000 bc77 	b.w	8004724 <__malloc_unlock>
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	d90b      	bls.n	8003e52 <_free_r+0x4e>
 8003e3a:	6821      	ldr	r1, [r4, #0]
 8003e3c:	1862      	adds	r2, r4, r1
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	bf04      	itt	eq
 8003e42:	681a      	ldreq	r2, [r3, #0]
 8003e44:	685b      	ldreq	r3, [r3, #4]
 8003e46:	6063      	str	r3, [r4, #4]
 8003e48:	bf04      	itt	eq
 8003e4a:	1852      	addeq	r2, r2, r1
 8003e4c:	6022      	streq	r2, [r4, #0]
 8003e4e:	602c      	str	r4, [r5, #0]
 8003e50:	e7ec      	b.n	8003e2c <_free_r+0x28>
 8003e52:	461a      	mov	r2, r3
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b10b      	cbz	r3, 8003e5c <_free_r+0x58>
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d9fa      	bls.n	8003e52 <_free_r+0x4e>
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	1855      	adds	r5, r2, r1
 8003e60:	42a5      	cmp	r5, r4
 8003e62:	d10b      	bne.n	8003e7c <_free_r+0x78>
 8003e64:	6824      	ldr	r4, [r4, #0]
 8003e66:	4421      	add	r1, r4
 8003e68:	1854      	adds	r4, r2, r1
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	d1dd      	bne.n	8003e2c <_free_r+0x28>
 8003e70:	681c      	ldr	r4, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	4421      	add	r1, r4
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	e7d7      	b.n	8003e2c <_free_r+0x28>
 8003e7c:	d902      	bls.n	8003e84 <_free_r+0x80>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	6003      	str	r3, [r0, #0]
 8003e82:	e7d3      	b.n	8003e2c <_free_r+0x28>
 8003e84:	6825      	ldr	r5, [r4, #0]
 8003e86:	1961      	adds	r1, r4, r5
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	bf04      	itt	eq
 8003e8c:	6819      	ldreq	r1, [r3, #0]
 8003e8e:	685b      	ldreq	r3, [r3, #4]
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	bf04      	itt	eq
 8003e94:	1949      	addeq	r1, r1, r5
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	6054      	str	r4, [r2, #4]
 8003e9a:	e7c7      	b.n	8003e2c <_free_r+0x28>
 8003e9c:	b003      	add	sp, #12
 8003e9e:	bd30      	pop	{r4, r5, pc}
 8003ea0:	20000094 	.word	0x20000094

08003ea4 <_malloc_r>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	1ccd      	adds	r5, r1, #3
 8003ea8:	f025 0503 	bic.w	r5, r5, #3
 8003eac:	3508      	adds	r5, #8
 8003eae:	2d0c      	cmp	r5, #12
 8003eb0:	bf38      	it	cc
 8003eb2:	250c      	movcc	r5, #12
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	db01      	blt.n	8003ebe <_malloc_r+0x1a>
 8003eba:	42a9      	cmp	r1, r5
 8003ebc:	d903      	bls.n	8003ec6 <_malloc_r+0x22>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	6033      	str	r3, [r6, #0]
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec6:	f000 fc27 	bl	8004718 <__malloc_lock>
 8003eca:	4921      	ldr	r1, [pc, #132]	; (8003f50 <_malloc_r+0xac>)
 8003ecc:	680a      	ldr	r2, [r1, #0]
 8003ece:	4614      	mov	r4, r2
 8003ed0:	b99c      	cbnz	r4, 8003efa <_malloc_r+0x56>
 8003ed2:	4f20      	ldr	r7, [pc, #128]	; (8003f54 <_malloc_r+0xb0>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b923      	cbnz	r3, 8003ee2 <_malloc_r+0x3e>
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4630      	mov	r0, r6
 8003edc:	f000 fb72 	bl	80045c4 <_sbrk_r>
 8003ee0:	6038      	str	r0, [r7, #0]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 fb6d 	bl	80045c4 <_sbrk_r>
 8003eea:	1c43      	adds	r3, r0, #1
 8003eec:	d123      	bne.n	8003f36 <_malloc_r+0x92>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 fc16 	bl	8004724 <__malloc_unlock>
 8003ef8:	e7e3      	b.n	8003ec2 <_malloc_r+0x1e>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	1b5b      	subs	r3, r3, r5
 8003efe:	d417      	bmi.n	8003f30 <_malloc_r+0x8c>
 8003f00:	2b0b      	cmp	r3, #11
 8003f02:	d903      	bls.n	8003f0c <_malloc_r+0x68>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	441c      	add	r4, r3
 8003f08:	6025      	str	r5, [r4, #0]
 8003f0a:	e004      	b.n	8003f16 <_malloc_r+0x72>
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	42a2      	cmp	r2, r4
 8003f10:	bf0c      	ite	eq
 8003f12:	600b      	streq	r3, [r1, #0]
 8003f14:	6053      	strne	r3, [r2, #4]
 8003f16:	4630      	mov	r0, r6
 8003f18:	f000 fc04 	bl	8004724 <__malloc_unlock>
 8003f1c:	f104 000b 	add.w	r0, r4, #11
 8003f20:	1d23      	adds	r3, r4, #4
 8003f22:	f020 0007 	bic.w	r0, r0, #7
 8003f26:	1ac2      	subs	r2, r0, r3
 8003f28:	d0cc      	beq.n	8003ec4 <_malloc_r+0x20>
 8003f2a:	1a1b      	subs	r3, r3, r0
 8003f2c:	50a3      	str	r3, [r4, r2]
 8003f2e:	e7c9      	b.n	8003ec4 <_malloc_r+0x20>
 8003f30:	4622      	mov	r2, r4
 8003f32:	6864      	ldr	r4, [r4, #4]
 8003f34:	e7cc      	b.n	8003ed0 <_malloc_r+0x2c>
 8003f36:	1cc4      	adds	r4, r0, #3
 8003f38:	f024 0403 	bic.w	r4, r4, #3
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d0e3      	beq.n	8003f08 <_malloc_r+0x64>
 8003f40:	1a21      	subs	r1, r4, r0
 8003f42:	4630      	mov	r0, r6
 8003f44:	f000 fb3e 	bl	80045c4 <_sbrk_r>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d1dd      	bne.n	8003f08 <_malloc_r+0x64>
 8003f4c:	e7cf      	b.n	8003eee <_malloc_r+0x4a>
 8003f4e:	bf00      	nop
 8003f50:	20000094 	.word	0x20000094
 8003f54:	20000098 	.word	0x20000098

08003f58 <__sfputc_r>:
 8003f58:	6893      	ldr	r3, [r2, #8]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	b410      	push	{r4}
 8003f60:	6093      	str	r3, [r2, #8]
 8003f62:	da08      	bge.n	8003f76 <__sfputc_r+0x1e>
 8003f64:	6994      	ldr	r4, [r2, #24]
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	db01      	blt.n	8003f6e <__sfputc_r+0x16>
 8003f6a:	290a      	cmp	r1, #10
 8003f6c:	d103      	bne.n	8003f76 <__sfputc_r+0x1e>
 8003f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f72:	f7ff bc61 	b.w	8003838 <__swbuf_r>
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	1c58      	adds	r0, r3, #1
 8003f7a:	6010      	str	r0, [r2, #0]
 8003f7c:	7019      	strb	r1, [r3, #0]
 8003f7e:	4608      	mov	r0, r1
 8003f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <__sfputs_r>:
 8003f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f88:	4606      	mov	r6, r0
 8003f8a:	460f      	mov	r7, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	18d5      	adds	r5, r2, r3
 8003f90:	42ac      	cmp	r4, r5
 8003f92:	d101      	bne.n	8003f98 <__sfputs_r+0x12>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e007      	b.n	8003fa8 <__sfputs_r+0x22>
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	463a      	mov	r2, r7
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f7ff ffda 	bl	8003f58 <__sfputc_r>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d1f3      	bne.n	8003f90 <__sfputs_r+0xa>
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fac <_vfiprintf_r>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	b09d      	sub	sp, #116	; 0x74
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	4698      	mov	r8, r3
 8003fb8:	4606      	mov	r6, r0
 8003fba:	b118      	cbz	r0, 8003fc4 <_vfiprintf_r+0x18>
 8003fbc:	6983      	ldr	r3, [r0, #24]
 8003fbe:	b90b      	cbnz	r3, 8003fc4 <_vfiprintf_r+0x18>
 8003fc0:	f7ff fe14 	bl	8003bec <__sinit>
 8003fc4:	4b89      	ldr	r3, [pc, #548]	; (80041ec <_vfiprintf_r+0x240>)
 8003fc6:	429d      	cmp	r5, r3
 8003fc8:	d11b      	bne.n	8004002 <_vfiprintf_r+0x56>
 8003fca:	6875      	ldr	r5, [r6, #4]
 8003fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fce:	07d9      	lsls	r1, r3, #31
 8003fd0:	d405      	bmi.n	8003fde <_vfiprintf_r+0x32>
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	059a      	lsls	r2, r3, #22
 8003fd6:	d402      	bmi.n	8003fde <_vfiprintf_r+0x32>
 8003fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fda:	f7ff fea5 	bl	8003d28 <__retarget_lock_acquire_recursive>
 8003fde:	89ab      	ldrh	r3, [r5, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	d501      	bpl.n	8003fe8 <_vfiprintf_r+0x3c>
 8003fe4:	692b      	ldr	r3, [r5, #16]
 8003fe6:	b9eb      	cbnz	r3, 8004024 <_vfiprintf_r+0x78>
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4630      	mov	r0, r6
 8003fec:	f7ff fc76 	bl	80038dc <__swsetup_r>
 8003ff0:	b1c0      	cbz	r0, 8004024 <_vfiprintf_r+0x78>
 8003ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff4:	07dc      	lsls	r4, r3, #31
 8003ff6:	d50e      	bpl.n	8004016 <_vfiprintf_r+0x6a>
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	b01d      	add	sp, #116	; 0x74
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <_vfiprintf_r+0x244>)
 8004004:	429d      	cmp	r5, r3
 8004006:	d101      	bne.n	800400c <_vfiprintf_r+0x60>
 8004008:	68b5      	ldr	r5, [r6, #8]
 800400a:	e7df      	b.n	8003fcc <_vfiprintf_r+0x20>
 800400c:	4b79      	ldr	r3, [pc, #484]	; (80041f4 <_vfiprintf_r+0x248>)
 800400e:	429d      	cmp	r5, r3
 8004010:	bf08      	it	eq
 8004012:	68f5      	ldreq	r5, [r6, #12]
 8004014:	e7da      	b.n	8003fcc <_vfiprintf_r+0x20>
 8004016:	89ab      	ldrh	r3, [r5, #12]
 8004018:	0598      	lsls	r0, r3, #22
 800401a:	d4ed      	bmi.n	8003ff8 <_vfiprintf_r+0x4c>
 800401c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401e:	f7ff fe84 	bl	8003d2a <__retarget_lock_release_recursive>
 8004022:	e7e9      	b.n	8003ff8 <_vfiprintf_r+0x4c>
 8004024:	2300      	movs	r3, #0
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	2320      	movs	r3, #32
 800402a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800402e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004032:	2330      	movs	r3, #48	; 0x30
 8004034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041f8 <_vfiprintf_r+0x24c>
 8004038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800403c:	f04f 0901 	mov.w	r9, #1
 8004040:	4623      	mov	r3, r4
 8004042:	469a      	mov	sl, r3
 8004044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004048:	b10a      	cbz	r2, 800404e <_vfiprintf_r+0xa2>
 800404a:	2a25      	cmp	r2, #37	; 0x25
 800404c:	d1f9      	bne.n	8004042 <_vfiprintf_r+0x96>
 800404e:	ebba 0b04 	subs.w	fp, sl, r4
 8004052:	d00b      	beq.n	800406c <_vfiprintf_r+0xc0>
 8004054:	465b      	mov	r3, fp
 8004056:	4622      	mov	r2, r4
 8004058:	4629      	mov	r1, r5
 800405a:	4630      	mov	r0, r6
 800405c:	f7ff ff93 	bl	8003f86 <__sfputs_r>
 8004060:	3001      	adds	r0, #1
 8004062:	f000 80aa 	beq.w	80041ba <_vfiprintf_r+0x20e>
 8004066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004068:	445a      	add	r2, fp
 800406a:	9209      	str	r2, [sp, #36]	; 0x24
 800406c:	f89a 3000 	ldrb.w	r3, [sl]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a2 	beq.w	80041ba <_vfiprintf_r+0x20e>
 8004076:	2300      	movs	r3, #0
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004080:	f10a 0a01 	add.w	sl, sl, #1
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800408c:	931a      	str	r3, [sp, #104]	; 0x68
 800408e:	4654      	mov	r4, sl
 8004090:	2205      	movs	r2, #5
 8004092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004096:	4858      	ldr	r0, [pc, #352]	; (80041f8 <_vfiprintf_r+0x24c>)
 8004098:	f7fc f89a 	bl	80001d0 <memchr>
 800409c:	9a04      	ldr	r2, [sp, #16]
 800409e:	b9d8      	cbnz	r0, 80040d8 <_vfiprintf_r+0x12c>
 80040a0:	06d1      	lsls	r1, r2, #27
 80040a2:	bf44      	itt	mi
 80040a4:	2320      	movmi	r3, #32
 80040a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040aa:	0713      	lsls	r3, r2, #28
 80040ac:	bf44      	itt	mi
 80040ae:	232b      	movmi	r3, #43	; 0x2b
 80040b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b4:	f89a 3000 	ldrb.w	r3, [sl]
 80040b8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ba:	d015      	beq.n	80040e8 <_vfiprintf_r+0x13c>
 80040bc:	9a07      	ldr	r2, [sp, #28]
 80040be:	4654      	mov	r4, sl
 80040c0:	2000      	movs	r0, #0
 80040c2:	f04f 0c0a 	mov.w	ip, #10
 80040c6:	4621      	mov	r1, r4
 80040c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040cc:	3b30      	subs	r3, #48	; 0x30
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d94e      	bls.n	8004170 <_vfiprintf_r+0x1c4>
 80040d2:	b1b0      	cbz	r0, 8004102 <_vfiprintf_r+0x156>
 80040d4:	9207      	str	r2, [sp, #28]
 80040d6:	e014      	b.n	8004102 <_vfiprintf_r+0x156>
 80040d8:	eba0 0308 	sub.w	r3, r0, r8
 80040dc:	fa09 f303 	lsl.w	r3, r9, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	46a2      	mov	sl, r4
 80040e6:	e7d2      	b.n	800408e <_vfiprintf_r+0xe2>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	1d19      	adds	r1, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	9103      	str	r1, [sp, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bfbb      	ittet	lt
 80040f4:	425b      	neglt	r3, r3
 80040f6:	f042 0202 	orrlt.w	r2, r2, #2
 80040fa:	9307      	strge	r3, [sp, #28]
 80040fc:	9307      	strlt	r3, [sp, #28]
 80040fe:	bfb8      	it	lt
 8004100:	9204      	strlt	r2, [sp, #16]
 8004102:	7823      	ldrb	r3, [r4, #0]
 8004104:	2b2e      	cmp	r3, #46	; 0x2e
 8004106:	d10c      	bne.n	8004122 <_vfiprintf_r+0x176>
 8004108:	7863      	ldrb	r3, [r4, #1]
 800410a:	2b2a      	cmp	r3, #42	; 0x2a
 800410c:	d135      	bne.n	800417a <_vfiprintf_r+0x1ce>
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	1d1a      	adds	r2, r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	9203      	str	r2, [sp, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfb8      	it	lt
 800411a:	f04f 33ff 	movlt.w	r3, #4294967295
 800411e:	3402      	adds	r4, #2
 8004120:	9305      	str	r3, [sp, #20]
 8004122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004208 <_vfiprintf_r+0x25c>
 8004126:	7821      	ldrb	r1, [r4, #0]
 8004128:	2203      	movs	r2, #3
 800412a:	4650      	mov	r0, sl
 800412c:	f7fc f850 	bl	80001d0 <memchr>
 8004130:	b140      	cbz	r0, 8004144 <_vfiprintf_r+0x198>
 8004132:	2340      	movs	r3, #64	; 0x40
 8004134:	eba0 000a 	sub.w	r0, r0, sl
 8004138:	fa03 f000 	lsl.w	r0, r3, r0
 800413c:	9b04      	ldr	r3, [sp, #16]
 800413e:	4303      	orrs	r3, r0
 8004140:	3401      	adds	r4, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	482c      	ldr	r0, [pc, #176]	; (80041fc <_vfiprintf_r+0x250>)
 800414a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800414e:	2206      	movs	r2, #6
 8004150:	f7fc f83e 	bl	80001d0 <memchr>
 8004154:	2800      	cmp	r0, #0
 8004156:	d03f      	beq.n	80041d8 <_vfiprintf_r+0x22c>
 8004158:	4b29      	ldr	r3, [pc, #164]	; (8004200 <_vfiprintf_r+0x254>)
 800415a:	bb1b      	cbnz	r3, 80041a4 <_vfiprintf_r+0x1f8>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	3307      	adds	r3, #7
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	3308      	adds	r3, #8
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416a:	443b      	add	r3, r7
 800416c:	9309      	str	r3, [sp, #36]	; 0x24
 800416e:	e767      	b.n	8004040 <_vfiprintf_r+0x94>
 8004170:	fb0c 3202 	mla	r2, ip, r2, r3
 8004174:	460c      	mov	r4, r1
 8004176:	2001      	movs	r0, #1
 8004178:	e7a5      	b.n	80040c6 <_vfiprintf_r+0x11a>
 800417a:	2300      	movs	r3, #0
 800417c:	3401      	adds	r4, #1
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4620      	mov	r0, r4
 8004188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800418c:	3a30      	subs	r2, #48	; 0x30
 800418e:	2a09      	cmp	r2, #9
 8004190:	d903      	bls.n	800419a <_vfiprintf_r+0x1ee>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0c5      	beq.n	8004122 <_vfiprintf_r+0x176>
 8004196:	9105      	str	r1, [sp, #20]
 8004198:	e7c3      	b.n	8004122 <_vfiprintf_r+0x176>
 800419a:	fb0c 2101 	mla	r1, ip, r1, r2
 800419e:	4604      	mov	r4, r0
 80041a0:	2301      	movs	r3, #1
 80041a2:	e7f0      	b.n	8004186 <_vfiprintf_r+0x1da>
 80041a4:	ab03      	add	r3, sp, #12
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	462a      	mov	r2, r5
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <_vfiprintf_r+0x258>)
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	4630      	mov	r0, r6
 80041b0:	f3af 8000 	nop.w
 80041b4:	4607      	mov	r7, r0
 80041b6:	1c78      	adds	r0, r7, #1
 80041b8:	d1d6      	bne.n	8004168 <_vfiprintf_r+0x1bc>
 80041ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041bc:	07d9      	lsls	r1, r3, #31
 80041be:	d405      	bmi.n	80041cc <_vfiprintf_r+0x220>
 80041c0:	89ab      	ldrh	r3, [r5, #12]
 80041c2:	059a      	lsls	r2, r3, #22
 80041c4:	d402      	bmi.n	80041cc <_vfiprintf_r+0x220>
 80041c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041c8:	f7ff fdaf 	bl	8003d2a <__retarget_lock_release_recursive>
 80041cc:	89ab      	ldrh	r3, [r5, #12]
 80041ce:	065b      	lsls	r3, r3, #25
 80041d0:	f53f af12 	bmi.w	8003ff8 <_vfiprintf_r+0x4c>
 80041d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041d6:	e711      	b.n	8003ffc <_vfiprintf_r+0x50>
 80041d8:	ab03      	add	r3, sp, #12
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	462a      	mov	r2, r5
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <_vfiprintf_r+0x258>)
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	4630      	mov	r0, r6
 80041e4:	f000 f880 	bl	80042e8 <_printf_i>
 80041e8:	e7e4      	b.n	80041b4 <_vfiprintf_r+0x208>
 80041ea:	bf00      	nop
 80041ec:	080047c0 	.word	0x080047c0
 80041f0:	080047e0 	.word	0x080047e0
 80041f4:	080047a0 	.word	0x080047a0
 80041f8:	08004800 	.word	0x08004800
 80041fc:	0800480a 	.word	0x0800480a
 8004200:	00000000 	.word	0x00000000
 8004204:	08003f87 	.word	0x08003f87
 8004208:	08004806 	.word	0x08004806

0800420c <_printf_common>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4616      	mov	r6, r2
 8004212:	4699      	mov	r9, r3
 8004214:	688a      	ldr	r2, [r1, #8]
 8004216:	690b      	ldr	r3, [r1, #16]
 8004218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800421c:	4293      	cmp	r3, r2
 800421e:	bfb8      	it	lt
 8004220:	4613      	movlt	r3, r2
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004228:	4607      	mov	r7, r0
 800422a:	460c      	mov	r4, r1
 800422c:	b10a      	cbz	r2, 8004232 <_printf_common+0x26>
 800422e:	3301      	adds	r3, #1
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	6833      	ldrmi	r3, [r6, #0]
 800423a:	3302      	addmi	r3, #2
 800423c:	6033      	strmi	r3, [r6, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d106      	bne.n	8004254 <_printf_common+0x48>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	42ab      	cmp	r3, r5
 8004252:	dc26      	bgt.n	80042a2 <_printf_common+0x96>
 8004254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004258:	1e13      	subs	r3, r2, #0
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	bf18      	it	ne
 800425e:	2301      	movne	r3, #1
 8004260:	0692      	lsls	r2, r2, #26
 8004262:	d42b      	bmi.n	80042bc <_printf_common+0xb0>
 8004264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004268:	4649      	mov	r1, r9
 800426a:	4638      	mov	r0, r7
 800426c:	47c0      	blx	r8
 800426e:	3001      	adds	r0, #1
 8004270:	d01e      	beq.n	80042b0 <_printf_common+0xa4>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	68e5      	ldr	r5, [r4, #12]
 8004276:	6832      	ldr	r2, [r6, #0]
 8004278:	f003 0306 	and.w	r3, r3, #6
 800427c:	2b04      	cmp	r3, #4
 800427e:	bf08      	it	eq
 8004280:	1aad      	subeq	r5, r5, r2
 8004282:	68a3      	ldr	r3, [r4, #8]
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	bf0c      	ite	eq
 8004288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800428c:	2500      	movne	r5, #0
 800428e:	4293      	cmp	r3, r2
 8004290:	bfc4      	itt	gt
 8004292:	1a9b      	subgt	r3, r3, r2
 8004294:	18ed      	addgt	r5, r5, r3
 8004296:	2600      	movs	r6, #0
 8004298:	341a      	adds	r4, #26
 800429a:	42b5      	cmp	r5, r6
 800429c:	d11a      	bne.n	80042d4 <_printf_common+0xc8>
 800429e:	2000      	movs	r0, #0
 80042a0:	e008      	b.n	80042b4 <_printf_common+0xa8>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4652      	mov	r2, sl
 80042a6:	4649      	mov	r1, r9
 80042a8:	4638      	mov	r0, r7
 80042aa:	47c0      	blx	r8
 80042ac:	3001      	adds	r0, #1
 80042ae:	d103      	bne.n	80042b8 <_printf_common+0xac>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	3501      	adds	r5, #1
 80042ba:	e7c6      	b.n	800424a <_printf_common+0x3e>
 80042bc:	18e1      	adds	r1, r4, r3
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	2030      	movs	r0, #48	; 0x30
 80042c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042c6:	4422      	add	r2, r4
 80042c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d0:	3302      	adds	r3, #2
 80042d2:	e7c7      	b.n	8004264 <_printf_common+0x58>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4622      	mov	r2, r4
 80042d8:	4649      	mov	r1, r9
 80042da:	4638      	mov	r0, r7
 80042dc:	47c0      	blx	r8
 80042de:	3001      	adds	r0, #1
 80042e0:	d0e6      	beq.n	80042b0 <_printf_common+0xa4>
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7d9      	b.n	800429a <_printf_common+0x8e>
	...

080042e8 <_printf_i>:
 80042e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	460c      	mov	r4, r1
 80042ee:	4691      	mov	r9, r2
 80042f0:	7e27      	ldrb	r7, [r4, #24]
 80042f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042f4:	2f78      	cmp	r7, #120	; 0x78
 80042f6:	4680      	mov	r8, r0
 80042f8:	469a      	mov	sl, r3
 80042fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042fe:	d807      	bhi.n	8004310 <_printf_i+0x28>
 8004300:	2f62      	cmp	r7, #98	; 0x62
 8004302:	d80a      	bhi.n	800431a <_printf_i+0x32>
 8004304:	2f00      	cmp	r7, #0
 8004306:	f000 80d8 	beq.w	80044ba <_printf_i+0x1d2>
 800430a:	2f58      	cmp	r7, #88	; 0x58
 800430c:	f000 80a3 	beq.w	8004456 <_printf_i+0x16e>
 8004310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004318:	e03a      	b.n	8004390 <_printf_i+0xa8>
 800431a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800431e:	2b15      	cmp	r3, #21
 8004320:	d8f6      	bhi.n	8004310 <_printf_i+0x28>
 8004322:	a001      	add	r0, pc, #4	; (adr r0, 8004328 <_printf_i+0x40>)
 8004324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004328:	08004381 	.word	0x08004381
 800432c:	08004395 	.word	0x08004395
 8004330:	08004311 	.word	0x08004311
 8004334:	08004311 	.word	0x08004311
 8004338:	08004311 	.word	0x08004311
 800433c:	08004311 	.word	0x08004311
 8004340:	08004395 	.word	0x08004395
 8004344:	08004311 	.word	0x08004311
 8004348:	08004311 	.word	0x08004311
 800434c:	08004311 	.word	0x08004311
 8004350:	08004311 	.word	0x08004311
 8004354:	080044a1 	.word	0x080044a1
 8004358:	080043c5 	.word	0x080043c5
 800435c:	08004483 	.word	0x08004483
 8004360:	08004311 	.word	0x08004311
 8004364:	08004311 	.word	0x08004311
 8004368:	080044c3 	.word	0x080044c3
 800436c:	08004311 	.word	0x08004311
 8004370:	080043c5 	.word	0x080043c5
 8004374:	08004311 	.word	0x08004311
 8004378:	08004311 	.word	0x08004311
 800437c:	0800448b 	.word	0x0800448b
 8004380:	680b      	ldr	r3, [r1, #0]
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	600a      	str	r2, [r1, #0]
 8004388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800438c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004390:	2301      	movs	r3, #1
 8004392:	e0a3      	b.n	80044dc <_printf_i+0x1f4>
 8004394:	6825      	ldr	r5, [r4, #0]
 8004396:	6808      	ldr	r0, [r1, #0]
 8004398:	062e      	lsls	r6, r5, #24
 800439a:	f100 0304 	add.w	r3, r0, #4
 800439e:	d50a      	bpl.n	80043b6 <_printf_i+0xce>
 80043a0:	6805      	ldr	r5, [r0, #0]
 80043a2:	600b      	str	r3, [r1, #0]
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	da03      	bge.n	80043b0 <_printf_i+0xc8>
 80043a8:	232d      	movs	r3, #45	; 0x2d
 80043aa:	426d      	negs	r5, r5
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b0:	485e      	ldr	r0, [pc, #376]	; (800452c <_printf_i+0x244>)
 80043b2:	230a      	movs	r3, #10
 80043b4:	e019      	b.n	80043ea <_printf_i+0x102>
 80043b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043ba:	6805      	ldr	r5, [r0, #0]
 80043bc:	600b      	str	r3, [r1, #0]
 80043be:	bf18      	it	ne
 80043c0:	b22d      	sxthne	r5, r5
 80043c2:	e7ef      	b.n	80043a4 <_printf_i+0xbc>
 80043c4:	680b      	ldr	r3, [r1, #0]
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	1d18      	adds	r0, r3, #4
 80043ca:	6008      	str	r0, [r1, #0]
 80043cc:	0628      	lsls	r0, r5, #24
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0xec>
 80043d0:	681d      	ldr	r5, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0xf2>
 80043d4:	0669      	lsls	r1, r5, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0xe8>
 80043d8:	881d      	ldrh	r5, [r3, #0]
 80043da:	4854      	ldr	r0, [pc, #336]	; (800452c <_printf_i+0x244>)
 80043dc:	2f6f      	cmp	r7, #111	; 0x6f
 80043de:	bf0c      	ite	eq
 80043e0:	2308      	moveq	r3, #8
 80043e2:	230a      	movne	r3, #10
 80043e4:	2100      	movs	r1, #0
 80043e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ea:	6866      	ldr	r6, [r4, #4]
 80043ec:	60a6      	str	r6, [r4, #8]
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	bfa2      	ittt	ge
 80043f2:	6821      	ldrge	r1, [r4, #0]
 80043f4:	f021 0104 	bicge.w	r1, r1, #4
 80043f8:	6021      	strge	r1, [r4, #0]
 80043fa:	b90d      	cbnz	r5, 8004400 <_printf_i+0x118>
 80043fc:	2e00      	cmp	r6, #0
 80043fe:	d04d      	beq.n	800449c <_printf_i+0x1b4>
 8004400:	4616      	mov	r6, r2
 8004402:	fbb5 f1f3 	udiv	r1, r5, r3
 8004406:	fb03 5711 	mls	r7, r3, r1, r5
 800440a:	5dc7      	ldrb	r7, [r0, r7]
 800440c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004410:	462f      	mov	r7, r5
 8004412:	42bb      	cmp	r3, r7
 8004414:	460d      	mov	r5, r1
 8004416:	d9f4      	bls.n	8004402 <_printf_i+0x11a>
 8004418:	2b08      	cmp	r3, #8
 800441a:	d10b      	bne.n	8004434 <_printf_i+0x14c>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	07df      	lsls	r7, r3, #31
 8004420:	d508      	bpl.n	8004434 <_printf_i+0x14c>
 8004422:	6923      	ldr	r3, [r4, #16]
 8004424:	6861      	ldr	r1, [r4, #4]
 8004426:	4299      	cmp	r1, r3
 8004428:	bfde      	ittt	le
 800442a:	2330      	movle	r3, #48	; 0x30
 800442c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004434:	1b92      	subs	r2, r2, r6
 8004436:	6122      	str	r2, [r4, #16]
 8004438:	f8cd a000 	str.w	sl, [sp]
 800443c:	464b      	mov	r3, r9
 800443e:	aa03      	add	r2, sp, #12
 8004440:	4621      	mov	r1, r4
 8004442:	4640      	mov	r0, r8
 8004444:	f7ff fee2 	bl	800420c <_printf_common>
 8004448:	3001      	adds	r0, #1
 800444a:	d14c      	bne.n	80044e6 <_printf_i+0x1fe>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	b004      	add	sp, #16
 8004452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004456:	4835      	ldr	r0, [pc, #212]	; (800452c <_printf_i+0x244>)
 8004458:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	680e      	ldr	r6, [r1, #0]
 8004460:	061f      	lsls	r7, r3, #24
 8004462:	f856 5b04 	ldr.w	r5, [r6], #4
 8004466:	600e      	str	r6, [r1, #0]
 8004468:	d514      	bpl.n	8004494 <_printf_i+0x1ac>
 800446a:	07d9      	lsls	r1, r3, #31
 800446c:	bf44      	itt	mi
 800446e:	f043 0320 	orrmi.w	r3, r3, #32
 8004472:	6023      	strmi	r3, [r4, #0]
 8004474:	b91d      	cbnz	r5, 800447e <_printf_i+0x196>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	f023 0320 	bic.w	r3, r3, #32
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	2310      	movs	r3, #16
 8004480:	e7b0      	b.n	80043e4 <_printf_i+0xfc>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f043 0320 	orr.w	r3, r3, #32
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	2378      	movs	r3, #120	; 0x78
 800448c:	4828      	ldr	r0, [pc, #160]	; (8004530 <_printf_i+0x248>)
 800448e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004492:	e7e3      	b.n	800445c <_printf_i+0x174>
 8004494:	065e      	lsls	r6, r3, #25
 8004496:	bf48      	it	mi
 8004498:	b2ad      	uxthmi	r5, r5
 800449a:	e7e6      	b.n	800446a <_printf_i+0x182>
 800449c:	4616      	mov	r6, r2
 800449e:	e7bb      	b.n	8004418 <_printf_i+0x130>
 80044a0:	680b      	ldr	r3, [r1, #0]
 80044a2:	6826      	ldr	r6, [r4, #0]
 80044a4:	6960      	ldr	r0, [r4, #20]
 80044a6:	1d1d      	adds	r5, r3, #4
 80044a8:	600d      	str	r5, [r1, #0]
 80044aa:	0635      	lsls	r5, r6, #24
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	d501      	bpl.n	80044b4 <_printf_i+0x1cc>
 80044b0:	6018      	str	r0, [r3, #0]
 80044b2:	e002      	b.n	80044ba <_printf_i+0x1d2>
 80044b4:	0671      	lsls	r1, r6, #25
 80044b6:	d5fb      	bpl.n	80044b0 <_printf_i+0x1c8>
 80044b8:	8018      	strh	r0, [r3, #0]
 80044ba:	2300      	movs	r3, #0
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	4616      	mov	r6, r2
 80044c0:	e7ba      	b.n	8004438 <_printf_i+0x150>
 80044c2:	680b      	ldr	r3, [r1, #0]
 80044c4:	1d1a      	adds	r2, r3, #4
 80044c6:	600a      	str	r2, [r1, #0]
 80044c8:	681e      	ldr	r6, [r3, #0]
 80044ca:	6862      	ldr	r2, [r4, #4]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fb fe7e 	bl	80001d0 <memchr>
 80044d4:	b108      	cbz	r0, 80044da <_printf_i+0x1f2>
 80044d6:	1b80      	subs	r0, r0, r6
 80044d8:	6060      	str	r0, [r4, #4]
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	2300      	movs	r3, #0
 80044e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e4:	e7a8      	b.n	8004438 <_printf_i+0x150>
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	4632      	mov	r2, r6
 80044ea:	4649      	mov	r1, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	47d0      	blx	sl
 80044f0:	3001      	adds	r0, #1
 80044f2:	d0ab      	beq.n	800444c <_printf_i+0x164>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	079b      	lsls	r3, r3, #30
 80044f8:	d413      	bmi.n	8004522 <_printf_i+0x23a>
 80044fa:	68e0      	ldr	r0, [r4, #12]
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	4298      	cmp	r0, r3
 8004500:	bfb8      	it	lt
 8004502:	4618      	movlt	r0, r3
 8004504:	e7a4      	b.n	8004450 <_printf_i+0x168>
 8004506:	2301      	movs	r3, #1
 8004508:	4632      	mov	r2, r6
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	47d0      	blx	sl
 8004510:	3001      	adds	r0, #1
 8004512:	d09b      	beq.n	800444c <_printf_i+0x164>
 8004514:	3501      	adds	r5, #1
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	9903      	ldr	r1, [sp, #12]
 800451a:	1a5b      	subs	r3, r3, r1
 800451c:	42ab      	cmp	r3, r5
 800451e:	dcf2      	bgt.n	8004506 <_printf_i+0x21e>
 8004520:	e7eb      	b.n	80044fa <_printf_i+0x212>
 8004522:	2500      	movs	r5, #0
 8004524:	f104 0619 	add.w	r6, r4, #25
 8004528:	e7f5      	b.n	8004516 <_printf_i+0x22e>
 800452a:	bf00      	nop
 800452c:	08004811 	.word	0x08004811
 8004530:	08004822 	.word	0x08004822

08004534 <_putc_r>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	460d      	mov	r5, r1
 8004538:	4614      	mov	r4, r2
 800453a:	4606      	mov	r6, r0
 800453c:	b118      	cbz	r0, 8004546 <_putc_r+0x12>
 800453e:	6983      	ldr	r3, [r0, #24]
 8004540:	b90b      	cbnz	r3, 8004546 <_putc_r+0x12>
 8004542:	f7ff fb53 	bl	8003bec <__sinit>
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <_putc_r+0x84>)
 8004548:	429c      	cmp	r4, r3
 800454a:	d124      	bne.n	8004596 <_putc_r+0x62>
 800454c:	6874      	ldr	r4, [r6, #4]
 800454e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004550:	07d8      	lsls	r0, r3, #31
 8004552:	d405      	bmi.n	8004560 <_putc_r+0x2c>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	0599      	lsls	r1, r3, #22
 8004558:	d402      	bmi.n	8004560 <_putc_r+0x2c>
 800455a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800455c:	f7ff fbe4 	bl	8003d28 <__retarget_lock_acquire_recursive>
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	3b01      	subs	r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	da05      	bge.n	8004576 <_putc_r+0x42>
 800456a:	69a2      	ldr	r2, [r4, #24]
 800456c:	4293      	cmp	r3, r2
 800456e:	db1c      	blt.n	80045aa <_putc_r+0x76>
 8004570:	b2eb      	uxtb	r3, r5
 8004572:	2b0a      	cmp	r3, #10
 8004574:	d019      	beq.n	80045aa <_putc_r+0x76>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	6022      	str	r2, [r4, #0]
 800457c:	701d      	strb	r5, [r3, #0]
 800457e:	b2ed      	uxtb	r5, r5
 8004580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004582:	07da      	lsls	r2, r3, #31
 8004584:	d405      	bmi.n	8004592 <_putc_r+0x5e>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	059b      	lsls	r3, r3, #22
 800458a:	d402      	bmi.n	8004592 <_putc_r+0x5e>
 800458c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458e:	f7ff fbcc 	bl	8003d2a <__retarget_lock_release_recursive>
 8004592:	4628      	mov	r0, r5
 8004594:	bd70      	pop	{r4, r5, r6, pc}
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <_putc_r+0x88>)
 8004598:	429c      	cmp	r4, r3
 800459a:	d101      	bne.n	80045a0 <_putc_r+0x6c>
 800459c:	68b4      	ldr	r4, [r6, #8]
 800459e:	e7d6      	b.n	800454e <_putc_r+0x1a>
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <_putc_r+0x8c>)
 80045a2:	429c      	cmp	r4, r3
 80045a4:	bf08      	it	eq
 80045a6:	68f4      	ldreq	r4, [r6, #12]
 80045a8:	e7d1      	b.n	800454e <_putc_r+0x1a>
 80045aa:	4629      	mov	r1, r5
 80045ac:	4622      	mov	r2, r4
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff f942 	bl	8003838 <__swbuf_r>
 80045b4:	4605      	mov	r5, r0
 80045b6:	e7e3      	b.n	8004580 <_putc_r+0x4c>
 80045b8:	080047c0 	.word	0x080047c0
 80045bc:	080047e0 	.word	0x080047e0
 80045c0:	080047a0 	.word	0x080047a0

080045c4 <_sbrk_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d06      	ldr	r5, [pc, #24]	; (80045e0 <_sbrk_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fc fa36 	bl	8000a40 <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_sbrk_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_sbrk_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000140 	.word	0x20000140

080045e4 <__sread>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	460c      	mov	r4, r1
 80045e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ec:	f000 f8a0 	bl	8004730 <_read_r>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	bfab      	itete	ge
 80045f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045f6:	89a3      	ldrhlt	r3, [r4, #12]
 80045f8:	181b      	addge	r3, r3, r0
 80045fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045fe:	bfac      	ite	ge
 8004600:	6563      	strge	r3, [r4, #84]	; 0x54
 8004602:	81a3      	strhlt	r3, [r4, #12]
 8004604:	bd10      	pop	{r4, pc}

08004606 <__swrite>:
 8004606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460a:	461f      	mov	r7, r3
 800460c:	898b      	ldrh	r3, [r1, #12]
 800460e:	05db      	lsls	r3, r3, #23
 8004610:	4605      	mov	r5, r0
 8004612:	460c      	mov	r4, r1
 8004614:	4616      	mov	r6, r2
 8004616:	d505      	bpl.n	8004624 <__swrite+0x1e>
 8004618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461c:	2302      	movs	r3, #2
 800461e:	2200      	movs	r2, #0
 8004620:	f000 f868 	bl	80046f4 <_lseek_r>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800462a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	4632      	mov	r2, r6
 8004632:	463b      	mov	r3, r7
 8004634:	4628      	mov	r0, r5
 8004636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	f000 b817 	b.w	800466c <_write_r>

0800463e <__sseek>:
 800463e:	b510      	push	{r4, lr}
 8004640:	460c      	mov	r4, r1
 8004642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004646:	f000 f855 	bl	80046f4 <_lseek_r>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	bf15      	itete	ne
 8004650:	6560      	strne	r0, [r4, #84]	; 0x54
 8004652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800465a:	81a3      	strheq	r3, [r4, #12]
 800465c:	bf18      	it	ne
 800465e:	81a3      	strhne	r3, [r4, #12]
 8004660:	bd10      	pop	{r4, pc}

08004662 <__sclose>:
 8004662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004666:	f000 b813 	b.w	8004690 <_close_r>
	...

0800466c <_write_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d07      	ldr	r5, [pc, #28]	; (800468c <_write_r+0x20>)
 8004670:	4604      	mov	r4, r0
 8004672:	4608      	mov	r0, r1
 8004674:	4611      	mov	r1, r2
 8004676:	2200      	movs	r2, #0
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fc f8ec 	bl	8000858 <_write>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_write_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_write_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000140 	.word	0x20000140

08004690 <_close_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4d06      	ldr	r5, [pc, #24]	; (80046ac <_close_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4604      	mov	r4, r0
 8004698:	4608      	mov	r0, r1
 800469a:	602b      	str	r3, [r5, #0]
 800469c:	f7fc f908 	bl	80008b0 <_close>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_close_r+0x1a>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_close_r+0x1a>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000140 	.word	0x20000140

080046b0 <_fstat_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d07      	ldr	r5, [pc, #28]	; (80046d0 <_fstat_r+0x20>)
 80046b4:	2300      	movs	r3, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	f7fc f947 	bl	8000950 <_fstat>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d102      	bne.n	80046cc <_fstat_r+0x1c>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	b103      	cbz	r3, 80046cc <_fstat_r+0x1c>
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	20000140 	.word	0x20000140

080046d4 <_isatty_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d06      	ldr	r5, [pc, #24]	; (80046f0 <_isatty_r+0x1c>)
 80046d8:	2300      	movs	r3, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	602b      	str	r3, [r5, #0]
 80046e0:	f7fc f8a4 	bl	800082c <_isatty>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_isatty_r+0x1a>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_isatty_r+0x1a>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	20000140 	.word	0x20000140

080046f4 <_lseek_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d07      	ldr	r5, [pc, #28]	; (8004714 <_lseek_r+0x20>)
 80046f8:	4604      	mov	r4, r0
 80046fa:	4608      	mov	r0, r1
 80046fc:	4611      	mov	r1, r2
 80046fe:	2200      	movs	r2, #0
 8004700:	602a      	str	r2, [r5, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	f7fc f8eb 	bl	80008de <_lseek>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_lseek_r+0x1e>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_lseek_r+0x1e>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000140 	.word	0x20000140

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_lock+0x8>)
 800471a:	f7ff bb05 	b.w	8003d28 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	20000139 	.word	0x20000139

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_unlock+0x8>)
 8004726:	f7ff bb00 	b.w	8003d2a <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	20000139 	.word	0x20000139

08004730 <_read_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	; (8004750 <_read_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc f8de 	bl	8000900 <_read>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_read_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_read_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	20000140 	.word	0x20000140

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
