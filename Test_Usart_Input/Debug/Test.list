
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039cc  080039cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000008c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb1c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2e  00000000  00000000  0002cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c0  00000000  00000000  0002f288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d56  00000000  00000000  0002f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6fc  00000000  00000000  0005169e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4520  00000000  00000000  0005cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001212ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002368  00000000  00000000  00121310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003930 	.word	0x08003930

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003930 	.word	0x08003930

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b3a      	ldr	r3, [pc, #232]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a39      	ldr	r2, [pc, #228]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a32      	ldr	r2, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a2b      	ldr	r2, [pc, #172]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0320 	and.w	r3, r3, #32
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_GPIO_Init+0x104>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x104>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000568:	4817      	ldr	r0, [pc, #92]	; (80005c8 <MX_GPIO_Init+0x108>)
 800056a:	f000 fe7d 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800056e:	2310      	movs	r3, #16
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000576:	2302      	movs	r3, #2
 8000578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4812      	ldr	r0, [pc, #72]	; (80005cc <MX_GPIO_Init+0x10c>)
 8000582:	f000 fcd5 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <MX_GPIO_Init+0x108>)
 80005a0:	f000 fcc6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYUP_Pin;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYUP_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <MX_GPIO_Init+0x110>)
 80005b8:	f000 fcba 	bl	8000f30 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40021400 	.word	0x40021400
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40020000 	.word	0x40020000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fa94 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f814 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff6e 	bl	80004c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f9ea 	bl	80009bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);	//重定向初始化串口1
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <main+0x2c>)
 80005ea:	f000 f87d 	bl	80006e8 <RetargetInit>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4904      	ldr	r1, [pc, #16]	; (8000604 <main+0x30>)
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <main+0x2c>)
 80005f4:	f001 fc47 	bl	8001e86 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UART_LEDControl();
 80005f8:	f002 fbc6 	bl	8002d88 <UART_LEDControl>
 80005fc:	e7fc      	b.n	80005f8 <main+0x24>
 80005fe:	bf00      	nop
 8000600:	200000a0 	.word	0x200000a0
 8000604:	200000e8 	.word	0x200000e8

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fc06 	bl	8002e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe05 	bl	800129c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f820 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f866 	bl	800178c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f809 	bl	80006dc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <RetargetInit+0x28>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <RetargetInit+0x2c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6898      	ldr	r0, [r3, #8]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2202      	movs	r2, #2
 8000700:	2100      	movs	r1, #0
 8000702:	f002 fbaf 	bl	8002e64 <setvbuf>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000009c 	.word	0x2000009c
 8000714:	2000000c 	.word	0x2000000c

08000718 <_isatty>:

int _isatty(int fd) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db04      	blt.n	8000730 <_isatty+0x18>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b02      	cmp	r3, #2
 800072a:	dc01      	bgt.n	8000730 <_isatty+0x18>
    return 1;
 800072c:	2301      	movs	r3, #1
 800072e:	e005      	b.n	800073c <_isatty+0x24>

  errno = EBADF;
 8000730:	f002 fb50 	bl	8002dd4 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	2209      	movs	r2, #9
 8000738:	601a      	str	r2, [r3, #0]
  return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <_write>:

int _write(int fd, char* ptr, int len) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <_write+0x18>
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d111      	bne.n	8000780 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <_write+0x54>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	f001 fa58 	bl	8001c1e <HAL_UART_Transmit>
 800076e:	4603      	mov	r3, r0
 8000770:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <_write+0x38>
      return len;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	e008      	b.n	800078e <_write+0x4a>
    else
      return EIO;
 800077c:	2305      	movs	r3, #5
 800077e:	e006      	b.n	800078e <_write+0x4a>
  }
  errno = EBADF;
 8000780:	f002 fb28 	bl	8002dd4 <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	2209      	movs	r2, #9
 8000788:	601a      	str	r2, [r3, #0]
  return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000009c 	.word	0x2000009c

0800079c <_close>:

int _close(int fd) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db04      	blt.n	80007b4 <_close+0x18>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	dc01      	bgt.n	80007b4 <_close+0x18>
    return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e006      	b.n	80007c2 <_close+0x26>

  errno = EBADF;
 80007b4:	f002 fb0e 	bl	8002dd4 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2209      	movs	r2, #9
 80007bc:	601a      	str	r2, [r3, #0]
  return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80007d6:	f002 fafd 	bl	8002dd4 <__errno>
 80007da:	4603      	mov	r3, r0
 80007dc:	2209      	movs	r2, #9
 80007de:	601a      	str	r2, [r3, #0]
  return -1;
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_read>:

int _read(int fd, char* ptr, int len) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d110      	bne.n	8000820 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <_read+0x4c>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2201      	movs	r2, #1
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	f001 fa9a 	bl	8001d42 <HAL_UART_Receive>
 800080e:	4603      	mov	r3, r0
 8000810:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <_read+0x30>
      return 1;
 8000818:	2301      	movs	r3, #1
 800081a:	e008      	b.n	800082e <_read+0x42>
    else
      return EIO;
 800081c:	2305      	movs	r3, #5
 800081e:	e006      	b.n	800082e <_read+0x42>
  }
  errno = EBADF;
 8000820:	f002 fad8 	bl	8002dd4 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	2209      	movs	r2, #9
 8000828:	601a      	str	r2, [r3, #0]
  return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000009c 	.word	0x2000009c

0800083c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db08      	blt.n	800085e <_fstat+0x22>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	dc05      	bgt.n	800085e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000858:	605a      	str	r2, [r3, #4]
    return 0;
 800085a:	2300      	movs	r3, #0
 800085c:	e005      	b.n	800086a <_fstat+0x2e>
  }

  errno = EBADF;
 800085e:	f002 fab9 	bl	8002dd4 <__errno>
 8000862:	4603      	mov	r3, r0
 8000864:	2209      	movs	r2, #9
 8000866:	601a      	str	r2, [r3, #0]
  return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f94a 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART1_IRQHandler+0x10>)
 800091e:	f001 fae3 	bl	8001ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000a0 	.word	0x200000a0

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f002 fa3a 	bl	8002dd4 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20020000 	.word	0x20020000
 800098c:	00000400 	.word	0x00000400
 8000990:	2000008c 	.word	0x2000008c
 8000994:	20000100 	.word	0x20000100

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f001 f8c6 	bl	8001b84 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f7ff fe6d 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000a0 	.word	0x200000a0
 8000a0c:	40011000 	.word	0x40011000

08000a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d134      	bne.n	8000a9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <HAL_UART_MspInit+0x9c>)
 8000a88:	f000 fa52 	bl	8000f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2025      	movs	r0, #37	; 0x25
 8000a92:	f000 f984 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a96:	2025      	movs	r0, #37	; 0x25
 8000a98:	f000 f99d 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ff5d 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 f97f 	bl	8002de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd77 	bl	80005d4 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af4:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000af8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000afc:	200000fc 	.word	0x200000fc

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f92b 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe9c 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f943 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f90b 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000e4 	.word	0x200000e4

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000e4 	.word	0x200000e4

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff feda 	bl	8000bd0 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d008      	beq.n	8000e3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e052      	b.n	8000ee2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0216 	bic.w	r2, r2, #22
 8000e4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d103      	bne.n	8000e6c <HAL_DMA_Abort+0x62>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0208 	bic.w	r2, r2, #8
 8000e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8c:	e013      	b.n	8000eb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8e:	f7ff fe9f 	bl	8000bd0 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d90c      	bls.n	8000eb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e015      	b.n	8000ee2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e4      	bne.n	8000e8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec8:	223f      	movs	r2, #63	; 0x3f
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d004      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e00c      	b.n	8000f22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e16b      	b.n	8001224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 815a 	bne.w	800121e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80b4 	beq.w	800121e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b60      	ldr	r3, [pc, #384]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a5f      	ldr	r2, [pc, #380]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a5b      	ldr	r2, [pc, #364]	; (8001240 <HAL_GPIO_Init+0x310>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	; (8001248 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20a>
 8001136:	2307      	movs	r3, #7
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113a:	2308      	movs	r3, #8
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x228>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x228>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x310>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_GPIO_Init+0x334>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <HAL_GPIO_Init+0x334>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_GPIO_Init+0x334>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <HAL_GPIO_Init+0x334>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae90 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e264      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d075      	beq.n	80013a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	4ba3      	ldr	r3, [pc, #652]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d00c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4ba0      	ldr	r3, [pc, #640]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b9d      	ldr	r3, [pc, #628]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012de:	d10b      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d05b      	beq.n	80013a4 <HAL_RCC_OscConfig+0x108>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d157      	bne.n	80013a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e23f      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d106      	bne.n	8001310 <HAL_RCC_OscConfig+0x74>
 8001302:	4b91      	ldr	r3, [pc, #580]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a90      	ldr	r2, [pc, #576]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e01d      	b.n	800134c <HAL_RCC_OscConfig+0xb0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x98>
 800131a:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8a      	ldr	r2, [pc, #552]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a87      	ldr	r2, [pc, #540]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0xb0>
 8001334:	4b84      	ldr	r3, [pc, #528]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a83      	ldr	r2, [pc, #524]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a80      	ldr	r2, [pc, #512]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc3c 	bl	8000bd0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fc38 	bl	8000bd0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e204      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	4b76      	ldr	r3, [pc, #472]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0xc0>
 800137a:	e014      	b.n	80013a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fc28 	bl	8000bd0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc24 	bl	8000bd0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1f0      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	4b6c      	ldr	r3, [pc, #432]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0xe8>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d063      	beq.n	800147a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b62      	ldr	r3, [pc, #392]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d11c      	bne.n	8001404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x152>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e1c4      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4952      	ldr	r1, [pc, #328]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	e03a      	b.n	800147a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <HAL_RCC_OscConfig+0x2b0>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fbdd 	bl	8000bd0 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fbd9 	bl	8000bd0 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1a5      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4940      	ldr	r1, [pc, #256]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e015      	b.n	800147a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x2b0>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fbbc 	bl	8000bd0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff fbb8 	bl	8000bd0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e184      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d030      	beq.n	80014e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d016      	beq.n	80014bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_RCC_OscConfig+0x2b4>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fb9c 	bl	8000bd0 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fb98 	bl	8000bd0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e164      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x200>
 80014ba:	e015      	b.n	80014e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_OscConfig+0x2b4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb85 	bl	8000bd0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fb81 	bl	8000bd0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e14d      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f0      	bne.n	80014ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a0 	beq.w	8001636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10f      	bne.n	8001526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x2b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d121      	bne.n	8001576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb47 	bl	8000bd0 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e011      	b.n	800156a <HAL_RCC_OscConfig+0x2ce>
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	42470000 	.word	0x42470000
 8001550:	42470e80 	.word	0x42470e80
 8001554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001558:	f7ff fb3a 	bl	8000bd0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e106      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_RCC_OscConfig+0x4e4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x2f0>
 800157e:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a80      	ldr	r2, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	e01c      	b.n	80015c6 <HAL_RCC_OscConfig+0x32a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b05      	cmp	r3, #5
 8001592:	d10c      	bne.n	80015ae <HAL_RCC_OscConfig+0x312>
 8001594:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	4b78      	ldr	r3, [pc, #480]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a77      	ldr	r2, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e00b      	b.n	80015c6 <HAL_RCC_OscConfig+0x32a>
 80015ae:	4b75      	ldr	r3, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a74      	ldr	r2, [pc, #464]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	4b72      	ldr	r3, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d015      	beq.n	80015fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff faff 	bl	8000bd0 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fafb 	bl	8000bd0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0c5      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	4b65      	ldr	r3, [pc, #404]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ee      	beq.n	80015d6 <HAL_RCC_OscConfig+0x33a>
 80015f8:	e014      	b.n	8001624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fae9 	bl	8000bd0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fae5 	bl	8000bd0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0af      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ee      	bne.n	8001602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d105      	bne.n	8001636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162a:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a55      	ldr	r2, [pc, #340]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 809b 	beq.w	8001776 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d05c      	beq.n	8001706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d141      	bne.n	80016d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fab9 	bl	8000bd0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fab5 	bl	8000bd0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e081      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	019b      	lsls	r3, r3, #6
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	4937      	ldr	r1, [pc, #220]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x4ec>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fa8e 	bl	8000bd0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fa8a 	bl	8000bd0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e056      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x41c>
 80016d6:	e04e      	b.n	8001776 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_RCC_OscConfig+0x4ec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fa77 	bl	8000bd0 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fa73 	bl	8000bd0 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e03f      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x44a>
 8001704:	e037      	b.n	8001776 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e032      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCC_OscConfig+0x4e8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d028      	beq.n	8001772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d121      	bne.n	8001772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d11a      	bne.n	8001772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001748:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174a:	4293      	cmp	r3, r2
 800174c:	d111      	bne.n	8001772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40007000 	.word	0x40007000
 8001784:	40023800 	.word	0x40023800
 8001788:	42470060 	.word	0x42470060

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d90c      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d044      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e067      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4934      	ldr	r1, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff f9a8 	bl	8000bd0 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff f9a4 	bl	8000bd0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20c      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f908 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00
 8001948:	40023800 	.word	0x40023800
 800194c:	08003948 	.word	0x08003948
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001970:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d00d      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x40>
 800197c:	2b08      	cmp	r3, #8
 800197e:	f200 80bd 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x34>
 8001986:	2b04      	cmp	r3, #4
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x3a>
 800198a:	e0b7      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800198e:	60bb      	str	r3, [r7, #8]
       break;
 8001990:	e0b7      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001992:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001994:	60bb      	str	r3, [r7, #8]
      break;
 8001996:	e0b4      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a2:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d04d      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	461a      	mov	r2, r3
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	ea02 0800 	and.w	r8, r2, r0
 80019c6:	ea03 0901 	and.w	r9, r3, r1
 80019ca:	4640      	mov	r0, r8
 80019cc:	4649      	mov	r1, r9
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	014b      	lsls	r3, r1, #5
 80019d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019dc:	0142      	lsls	r2, r0, #5
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	ebb0 0008 	subs.w	r0, r0, r8
 80019e6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	018b      	lsls	r3, r1, #6
 80019f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019f8:	0182      	lsls	r2, r0, #6
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	00d9      	lsls	r1, r3, #3
 8001a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a0e:	00d0      	lsls	r0, r2, #3
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	eb12 0208 	adds.w	r2, r2, r8
 8001a18:	eb43 0309 	adc.w	r3, r3, r9
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0259      	lsls	r1, r3, #9
 8001a26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a2a:	0250      	lsls	r0, r2, #9
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f7fe fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e04a      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	461a      	mov	r2, r3
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	ea02 0400 	and.w	r4, r2, r0
 8001a62:	ea03 0501 	and.w	r5, r3, r1
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	014b      	lsls	r3, r1, #5
 8001a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a78:	0142      	lsls	r2, r0, #5
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	1b00      	subs	r0, r0, r4
 8001a80:	eb61 0105 	sbc.w	r1, r1, r5
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	018b      	lsls	r3, r1, #6
 8001a8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a92:	0182      	lsls	r2, r0, #6
 8001a94:	1a12      	subs	r2, r2, r0
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	00d9      	lsls	r1, r3, #3
 8001aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa8:	00d0      	lsls	r0, r2, #3
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	1912      	adds	r2, r2, r4
 8001ab0:	eb45 0303 	adc.w	r3, r5, r3
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0299      	lsls	r1, r3, #10
 8001abe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ac2:	0290      	lsls	r0, r2, #10
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	f7fe fb78 	bl	80001c8 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	60bb      	str	r3, [r7, #8]
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001afe:	60bb      	str	r3, [r7, #8]
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	68bb      	ldr	r3, [r7, #8]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08003958 	.word	0x08003958

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08003958 	.word	0x08003958

08001b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e03f      	b.n	8001c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ff30 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fe7d 	bl	80028c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b08a      	sub	sp, #40	; 0x28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d17c      	bne.n	8001d38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_UART_Transmit+0x2c>
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e075      	b.n	8001d3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_UART_Transmit+0x3e>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e06e      	b.n	8001d3a <HAL_UART_Transmit+0x11c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2221      	movs	r2, #33	; 0x21
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c72:	f7fe ffad 	bl	8000bd0 <HAL_GetTick>
 8001c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8c:	d108      	bne.n	8001ca0 <HAL_UART_Transmit+0x82>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	e003      	b.n	8001ca8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cb0:	e02a      	b.n	8001d08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fbc1 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e036      	b.n	8001d3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e007      	b.n	8001cfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1cf      	bne.n	8001cb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fb91 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e006      	b.n	8001d3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b08a      	sub	sp, #40	; 0x28
 8001d46:	af02      	add	r7, sp, #8
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	f040 808c 	bne.w	8001e7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_UART_Receive+0x2e>
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e084      	b.n	8001e7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_UART_Receive+0x40>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e07d      	b.n	8001e7e <HAL_UART_Receive+0x13c>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2222      	movs	r2, #34	; 0x22
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d9e:	f7fe ff17 	bl	8000bd0 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	88fa      	ldrh	r2, [r7, #6]
 8001dae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db8:	d108      	bne.n	8001dcc <HAL_UART_Receive+0x8a>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e003      	b.n	8001dd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ddc:	e043      	b.n	8001e66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	2120      	movs	r1, #32
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fb2b 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e042      	b.n	8001e7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	3302      	adds	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	e01f      	b.n	8001e58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e20:	d007      	beq.n	8001e32 <HAL_UART_Receive+0xf0>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_UART_Receive+0xfe>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e008      	b.n	8001e52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1b6      	bne.n	8001dde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d11d      	bne.n	8001edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_UART_Receive_IT+0x26>
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e016      	b.n	8001ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Receive_IT+0x38>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e00f      	b.n	8001ede <HAL_UART_Receive_IT+0x58>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fb24 	bl	8002520 <UART_Start_Receive_IT>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	e000      	b.n	8001ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0ba      	sub	sp, #232	; 0xe8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10f      	bne.n	8001f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_UART_IRQHandler+0x66>
 8001f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fc03 	bl	8002752 <UART_Receive_IT>
      return;
 8001f4c:	e256      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80de 	beq.w	8002114 <HAL_UART_IRQHandler+0x22c>
 8001f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80d1 	beq.w	8002114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_UART_IRQHandler+0xae>
 8001f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_UART_IRQHandler+0xd2>
 8001fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_UART_IRQHandler+0xf6>
 8001fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0204 	orr.w	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <HAL_UART_IRQHandler+0x126>
 8001fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0208 	orr.w	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 81ed 	beq.w	80023f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_UART_IRQHandler+0x14e>
 8002024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fb8e 	bl	8002752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_UART_IRQHandler+0x17a>
 800205a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04f      	beq.n	8002102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fa96 	bl	8002594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d141      	bne.n	80020fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3314      	adds	r3, #20
 800207c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002084:	e853 3f00 	ldrex	r3, [r3]
 8002088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800208c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3314      	adds	r3, #20
 800209e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1d9      	bne.n	8002076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d013      	beq.n	80020f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_UART_IRQHandler+0x3dc>)
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ff07 	bl	8000eea <HAL_DMA_Abort_IT>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	e00e      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f990 	bl	8002418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	e00a      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f98c 	bl	8002418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002100:	e006      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f988 	bl	8002418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800210e:	e170      	b.n	80023f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	bf00      	nop
    return;
 8002112:	e16e      	b.n	80023f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	2b01      	cmp	r3, #1
 800211a:	f040 814a 	bne.w	80023b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800211e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8143 	beq.w	80023b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800212c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 813c 	beq.w	80023b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	f040 80b4 	bne.w	80022c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800216c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8140 	beq.w	80023f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800217a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800217e:	429a      	cmp	r2, r3
 8002180:	f080 8139 	bcs.w	80023f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800218a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002196:	f000 8088 	beq.w	80022aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	330c      	adds	r3, #12
 80021a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1d9      	bne.n	800219a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3314      	adds	r3, #20
 80021ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f0:	e853 3f00 	ldrex	r3, [r3]
 80021f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3314      	adds	r3, #20
 8002206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800220a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800220e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800221c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e1      	bne.n	80021e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3314      	adds	r3, #20
 8002228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800222c:	e853 3f00 	ldrex	r3, [r3]
 8002230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800224c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800224e:	e841 2300 	strex	r3, r2, [r1]
 8002252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e3      	bne.n	8002222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	330c      	adds	r3, #12
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	e853 3f00 	ldrex	r3, [r3]
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227a:	f023 0310 	bic.w	r3, r3, #16
 800227e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800228c:	65ba      	str	r2, [r7, #88]	; 0x58
 800228e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002294:	e841 2300 	strex	r3, r2, [r1]
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800229a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e3      	bne.n	8002268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fdb0 	bl	8000e0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8b6 	bl	800242c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022c0:	e099      	b.n	80023f6 <HAL_UART_IRQHandler+0x50e>
 80022c2:	bf00      	nop
 80022c4:	0800265b 	.word	0x0800265b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 808b 	beq.w	80023fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80022e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8086 	beq.w	80023fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	e853 3f00 	ldrex	r3, [r3]
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002312:	647a      	str	r2, [r7, #68]	; 0x44
 8002314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1e3      	bne.n	80022ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3314      	adds	r3, #20
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	623b      	str	r3, [r7, #32]
   return(result);
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3314      	adds	r3, #20
 8002346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800234a:	633a      	str	r2, [r7, #48]	; 0x30
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e3      	bne.n	8002326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	e853 3f00 	ldrex	r3, [r3]
 800237a:	60fb      	str	r3, [r7, #12]
   return(result);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0310 	bic.w	r3, r3, #16
 8002382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002390:	61fa      	str	r2, [r7, #28]
 8002392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	617b      	str	r3, [r7, #20]
   return(result);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e3      	bne.n	800236c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f83e 	bl	800242c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b0:	e023      	b.n	80023fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_UART_IRQHandler+0x4ea>
 80023be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f959 	bl	8002682 <UART_Transmit_IT>
    return;
 80023d0:	e014      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00e      	beq.n	80023fc <HAL_UART_IRQHandler+0x514>
 80023de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f999 	bl	8002722 <UART_EndTransmit_IT>
    return;
 80023f0:	e004      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
    return;
 80023f2:	bf00      	nop
 80023f4:	e002      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
      return;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
      return;
 80023fa:	bf00      	nop
  }
}
 80023fc:	37e8      	adds	r7, #232	; 0xe8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop

08002404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	; 0x40
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002454:	e050      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d04c      	beq.n	80024f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x30>
 8002464:	f7fe fbb4 	bl	8000bd0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002470:	429a      	cmp	r2, r3
 8002472:	d241      	bcs.n	80024f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002494:	637a      	str	r2, [r7, #52]	; 0x34
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800249a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3314      	adds	r3, #20
 80024ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	613b      	str	r3, [r7, #16]
   return(result);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3314      	adds	r3, #20
 80024c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c8:	623a      	str	r2, [r7, #32]
 80024ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	69f9      	ldr	r1, [r7, #28]
 80024ce:	6a3a      	ldr	r2, [r7, #32]
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e5      	bne.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e00f      	b.n	8002518 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	429a      	cmp	r2, r3
 8002514:	d09f      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3740      	adds	r7, #64	; 0x40
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2222      	movs	r2, #34	; 0x22
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b095      	sub	sp, #84	; 0x54
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025bc:	643a      	str	r2, [r7, #64]	; 0x40
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	61fb      	str	r3, [r7, #28]
   return(result);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b01      	cmp	r3, #1
 800260a:	d119      	bne.n	8002640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	60bb      	str	r3, [r7, #8]
   return(result);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0310 	bic.w	r3, r3, #16
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800262c:	61ba      	str	r2, [r7, #24]
 800262e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6979      	ldr	r1, [r7, #20]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	613b      	str	r3, [r7, #16]
   return(result);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800264e:	bf00      	nop
 8002650:	3754      	adds	r7, #84	; 0x54
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff fecf 	bl	8002418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b21      	cmp	r3, #33	; 0x21
 8002694:	d13e      	bne.n	8002714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d114      	bne.n	80026ca <UART_Transmit_IT+0x48>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d110      	bne.n	80026ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e008      	b.n	80026dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	1c59      	adds	r1, r3, #1
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6211      	str	r1, [r2, #32]
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4619      	mov	r1, r3
 80026ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002714:	2302      	movs	r3, #2
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fe5e 	bl	8002404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08c      	sub	sp, #48	; 0x30
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b22      	cmp	r3, #34	; 0x22
 8002764:	f040 80ab 	bne.w	80028be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	d117      	bne.n	80027a2 <UART_Receive_IT+0x50>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002790:	b29a      	uxth	r2, r3
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	1c9a      	adds	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
 80027a0:	e026      	b.n	80027f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d007      	beq.n	80027c6 <UART_Receive_IT+0x74>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <UART_Receive_IT+0x82>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e008      	b.n	80027e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4619      	mov	r1, r3
 80027fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002800:	2b00      	cmp	r3, #0
 8002802:	d15a      	bne.n	80028ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0220 	bic.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	2b01      	cmp	r3, #1
 8002842:	d135      	bne.n	80028b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	613b      	str	r3, [r7, #16]
   return(result);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f023 0310 	bic.w	r3, r3, #16
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	623a      	str	r2, [r7, #32]
 800286c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	69f9      	ldr	r1, [r7, #28]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	61bb      	str	r3, [r7, #24]
   return(result);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d10a      	bne.n	80028a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fdbf 	bl	800242c <HAL_UARTEx_RxEventCallback>
 80028ae:	e002      	b.n	80028b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa09 	bl	8002cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e002      	b.n	80028c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	b09f      	sub	sp, #124	; 0x7c
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028de:	68d9      	ldr	r1, [r3, #12]
 80028e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	ea40 0301 	orr.w	r3, r0, r1
 80028e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4313      	orrs	r3, r2
 8002900:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800290c:	f021 010c 	bic.w	r1, r1, #12
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002916:	430b      	orrs	r3, r1
 8002918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	6999      	ldr	r1, [r3, #24]
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	ea40 0301 	orr.w	r3, r0, r1
 8002930:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4bc5      	ldr	r3, [pc, #788]	; (8002c4c <UART_SetConfig+0x384>)
 8002938:	429a      	cmp	r2, r3
 800293a:	d004      	beq.n	8002946 <UART_SetConfig+0x7e>
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4bc3      	ldr	r3, [pc, #780]	; (8002c50 <UART_SetConfig+0x388>)
 8002942:	429a      	cmp	r2, r3
 8002944:	d103      	bne.n	800294e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002946:	f7ff f909 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 800294a:	6778      	str	r0, [r7, #116]	; 0x74
 800294c:	e002      	b.n	8002954 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff f8f1 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002952:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295c:	f040 80b6 	bne.w	8002acc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002962:	461c      	mov	r4, r3
 8002964:	f04f 0500 	mov.w	r5, #0
 8002968:	4622      	mov	r2, r4
 800296a:	462b      	mov	r3, r5
 800296c:	1891      	adds	r1, r2, r2
 800296e:	6439      	str	r1, [r7, #64]	; 0x40
 8002970:	415b      	adcs	r3, r3
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
 8002974:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002978:	1912      	adds	r2, r2, r4
 800297a:	eb45 0303 	adc.w	r3, r5, r3
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298c:	00d0      	lsls	r0, r2, #3
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	1911      	adds	r1, r2, r4
 8002994:	6639      	str	r1, [r7, #96]	; 0x60
 8002996:	416b      	adcs	r3, r5
 8002998:	667b      	str	r3, [r7, #100]	; 0x64
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a8:	415b      	adcs	r3, r3
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029b4:	f7fd fc08 	bl	80001c8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4ba5      	ldr	r3, [pc, #660]	; (8002c54 <UART_SetConfig+0x38c>)
 80029be:	fba3 2302 	umull	r2, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	011e      	lsls	r6, r3, #4
 80029c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c8:	461c      	mov	r4, r3
 80029ca:	f04f 0500 	mov.w	r5, #0
 80029ce:	4622      	mov	r2, r4
 80029d0:	462b      	mov	r3, r5
 80029d2:	1891      	adds	r1, r2, r2
 80029d4:	6339      	str	r1, [r7, #48]	; 0x30
 80029d6:	415b      	adcs	r3, r3
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
 80029da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029de:	1912      	adds	r2, r2, r4
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	00d9      	lsls	r1, r3, #3
 80029ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029f2:	00d0      	lsls	r0, r2, #3
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	1911      	adds	r1, r2, r4
 80029fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80029fc:	416b      	adcs	r3, r5
 80029fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	1891      	adds	r1, r2, r2
 8002a0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a0e:	415b      	adcs	r3, r3
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a1a:	f7fd fbd5 	bl	80001c8 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <UART_SetConfig+0x38c>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <UART_SetConfig+0x38c>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a44:	441e      	add	r6, r3
 8002a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	1894      	adds	r4, r2, r2
 8002a54:	623c      	str	r4, [r7, #32]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a5e:	1812      	adds	r2, r2, r0
 8002a60:	eb41 0303 	adc.w	r3, r1, r3
 8002a64:	f04f 0400 	mov.w	r4, #0
 8002a68:	f04f 0500 	mov.w	r5, #0
 8002a6c:	00dd      	lsls	r5, r3, #3
 8002a6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a72:	00d4      	lsls	r4, r2, #3
 8002a74:	4622      	mov	r2, r4
 8002a76:	462b      	mov	r3, r5
 8002a78:	1814      	adds	r4, r2, r0
 8002a7a:	653c      	str	r4, [r7, #80]	; 0x50
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	61b9      	str	r1, [r7, #24]
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a9a:	f7fd fb95 	bl	80001c8 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <UART_SetConfig+0x38c>)
 8002aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3332      	adds	r3, #50	; 0x32
 8002ab6:	4a67      	ldr	r2, [pc, #412]	; (8002c54 <UART_SetConfig+0x38c>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 0207 	and.w	r2, r3, #7
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4432      	add	r2, r6
 8002ac8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002aca:	e0b9      	b.n	8002c40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ace:	461c      	mov	r4, r3
 8002ad0:	f04f 0500 	mov.w	r5, #0
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	1891      	adds	r1, r2, r2
 8002ada:	6139      	str	r1, [r7, #16]
 8002adc:	415b      	adcs	r3, r3
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae4:	1912      	adds	r2, r2, r4
 8002ae6:	eb45 0303 	adc.w	r3, r5, r3
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	00d9      	lsls	r1, r3, #3
 8002af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af8:	00d0      	lsls	r0, r2, #3
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	eb12 0804 	adds.w	r8, r2, r4
 8002b02:	eb43 0905 	adc.w	r9, r3, r5
 8002b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	008b      	lsls	r3, r1, #2
 8002b1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b1e:	0082      	lsls	r2, r0, #2
 8002b20:	4640      	mov	r0, r8
 8002b22:	4649      	mov	r1, r9
 8002b24:	f7fd fb50 	bl	80001c8 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <UART_SetConfig+0x38c>)
 8002b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	011e      	lsls	r6, r3, #4
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	1894      	adds	r4, r2, r2
 8002b44:	60bc      	str	r4, [r7, #8]
 8002b46:	415b      	adcs	r3, r3
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b4e:	1812      	adds	r2, r2, r0
 8002b50:	eb41 0303 	adc.w	r3, r1, r3
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	f04f 0500 	mov.w	r5, #0
 8002b5c:	00dd      	lsls	r5, r3, #3
 8002b5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b62:	00d4      	lsls	r4, r2, #3
 8002b64:	4622      	mov	r2, r4
 8002b66:	462b      	mov	r3, r5
 8002b68:	1814      	adds	r4, r2, r0
 8002b6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b88:	0082      	lsls	r2, r0, #2
 8002b8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b8e:	f7fd fb1b 	bl	80001c8 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <UART_SetConfig+0x38c>)
 8002b98:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2164      	movs	r1, #100	; 0x64
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3332      	adds	r3, #50	; 0x32
 8002baa:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <UART_SetConfig+0x38c>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb6:	441e      	add	r6, r3
 8002bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	1894      	adds	r4, r2, r2
 8002bc6:	603c      	str	r4, [r7, #0]
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd0:	1812      	adds	r2, r2, r0
 8002bd2:	eb41 0303 	adc.w	r3, r1, r3
 8002bd6:	f04f 0400 	mov.w	r4, #0
 8002bda:	f04f 0500 	mov.w	r5, #0
 8002bde:	00dd      	lsls	r5, r3, #3
 8002be0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002be4:	00d4      	lsls	r4, r2, #3
 8002be6:	4622      	mov	r2, r4
 8002be8:	462b      	mov	r3, r5
 8002bea:	eb12 0a00 	adds.w	sl, r2, r0
 8002bee:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	008b      	lsls	r3, r1, #2
 8002c06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c0a:	0082      	lsls	r2, r0, #2
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	4659      	mov	r1, fp
 8002c10:	f7fd fada 	bl	80001c8 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <UART_SetConfig+0x38c>)
 8002c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2164      	movs	r1, #100	; 0x64
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <UART_SetConfig+0x38c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4432      	add	r2, r6
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	377c      	adds	r7, #124	; 0x7c
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	51eb851f 	.word	0x51eb851f

08002c58 <LED_0>:

#include "led.h"


void LED_0(uint8_t a)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
	if(a)
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <LED_0+0x1e>
		HAL_GPIO_WritePin(GPIOF,LED0_Pin,GPIO_PIN_RESET);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c6e:	4807      	ldr	r0, [pc, #28]	; (8002c8c <LED_0+0x34>)
 8002c70:	f7fe fafa 	bl	8001268 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOF,LED0_Pin,GPIO_PIN_SET);
}
 8002c74:	e005      	b.n	8002c82 <LED_0+0x2a>
		HAL_GPIO_WritePin(GPIOF,LED0_Pin,GPIO_PIN_SET);
 8002c76:	2201      	movs	r2, #1
 8002c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7c:	4803      	ldr	r0, [pc, #12]	; (8002c8c <LED_0+0x34>)
 8002c7e:	f7fe faf3 	bl	8001268 <HAL_GPIO_WritePin>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021400 	.word	0x40021400

08002c90 <LED_1>:

void LED_1(uint8_t a)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
	if(a)
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <LED_1+0x1e>
		HAL_GPIO_WritePin(GPIOF,LED1_Pin,GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ca6:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <LED_1+0x34>)
 8002ca8:	f7fe fade 	bl	8001268 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOF,LED1_Pin,GPIO_PIN_SET);
}
 8002cac:	e005      	b.n	8002cba <LED_1+0x2a>
		HAL_GPIO_WritePin(GPIOF,LED1_Pin,GPIO_PIN_SET);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <LED_1+0x34>)
 8002cb6:	f7fe fad7 	bl	8001268 <HAL_GPIO_WritePin>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021400 	.word	0x40021400

08002cc8 <HAL_UART_RxCpltCallback>:
uint8_t  USART1_RX_BUF[USART1_REC_LEN];	//接收缓冲，最大USART1_REC_LEN个字节，在usart.h使用宏定义为200
uint16_t USART1_RX_STA = 0;		//接收状态标记
uint8_t  USART1_NewData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_UART_RxCpltCallback+0xb0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d14a      	bne.n	8002d6e <HAL_UART_RxCpltCallback+0xa6>
	{
		RetargetInit(&huart1);	//重定向初始化串口1
 8002cd8:	4827      	ldr	r0, [pc, #156]	; (8002d78 <HAL_UART_RxCpltCallback+0xb0>)
 8002cda:	f7fd fd05 	bl	80006e8 <RetargetInit>
		printf("%c",USART1_NewData);
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_UART_RxCpltCallback+0xb4>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f8a8 	bl	8002e38 <putchar>
		if((USART1_RX_STA & 0x8000) == 0)	//接收未完成
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db38      	blt.n	8002d64 <HAL_UART_RxCpltCallback+0x9c>
		{
			if(USART1_RX_STA&0x4000)	//接收到0x0d
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d011      	beq.n	8002d22 <HAL_UART_RxCpltCallback+0x5a>
			{
				if(USART1_NewData != 0x0a)
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <HAL_UART_RxCpltCallback+0xb4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b0a      	cmp	r3, #10
 8002d04:	d003      	beq.n	8002d0e <HAL_UART_RxCpltCallback+0x46>
					USART1_RX_STA = 0;	//接收错误，重新开始
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e02a      	b.n	8002d64 <HAL_UART_RxCpltCallback+0x9c>
				else USART1_RX_STA |=0x8000;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e020      	b.n	8002d64 <HAL_UART_RxCpltCallback+0x9c>
			}
			else	//还没接收到0x0d
			{
				if(USART1_NewData == 0x0d)
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_UART_RxCpltCallback+0xb4>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b0d      	cmp	r3, #13
 8002d28:	d107      	bne.n	8002d3a <HAL_UART_RxCpltCallback+0x72>
					USART1_RX_STA |= 0x4000;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e014      	b.n	8002d64 <HAL_UART_RxCpltCallback+0x9c>
				else
				{
					USART1_RX_BUF[USART1_RX_STA&0x3FFF] = USART1_NewData;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_UART_RxCpltCallback+0xb4>)
 8002d44:	7811      	ldrb	r1, [r2, #0]
 8002d46:	4a0f      	ldr	r2, [pc, #60]	; (8002d84 <HAL_UART_RxCpltCallback+0xbc>)
 8002d48:	54d1      	strb	r1, [r2, r3]
					USART1_RX_STA++;
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d54:	801a      	strh	r2, [r3, #0]
					if(USART1_RX_STA > (USART1_REC_LEN-1))
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_RxCpltCallback+0x9c>
						USART1_RX_STA = 0;	//接收数据错误，重新开始接收
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_UART_RxCpltCallback+0xb8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 8002d64:	2201      	movs	r2, #1
 8002d66:	4905      	ldr	r1, [pc, #20]	; (8002d7c <HAL_UART_RxCpltCallback+0xb4>)
 8002d68:	4803      	ldr	r0, [pc, #12]	; (8002d78 <HAL_UART_RxCpltCallback+0xb0>)
 8002d6a:	f7ff f88c 	bl	8001e86 <HAL_UART_Receive_IT>
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200000a0 	.word	0x200000a0
 8002d7c:	200000e8 	.word	0x200000e8
 8002d80:	20000090 	.word	0x20000090
 8002d84:	200000ec 	.word	0x200000ec

08002d88 <UART_LEDControl>:


void UART_LEDControl()
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	if(USART1_RX_STA & 0xc000)
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <UART_LEDControl+0x44>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <UART_LEDControl+0x3e>
	{
		if(USART1_RX_BUF[0] == '1')
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <UART_LEDControl+0x48>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b31      	cmp	r3, #49	; 0x31
 8002d9e:	d105      	bne.n	8002dac <UART_LEDControl+0x24>
		{
			LED_0(1);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7ff ff59 	bl	8002c58 <LED_0>
			LED_1(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff ff72 	bl	8002c90 <LED_1>
		}
		if(USART1_RX_BUF[0] == '0')
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <UART_LEDControl+0x48>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d105      	bne.n	8002dc0 <UART_LEDControl+0x38>
		{
			LED_0(0);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7ff ff4f 	bl	8002c58 <LED_0>
			LED_1(1);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff ff68 	bl	8002c90 <LED_1>
		}
		USART1_RX_STA = 0;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <UART_LEDControl+0x44>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000090 	.word	0x20000090
 8002dd0:	200000ec 	.word	0x200000ec

08002dd4 <__errno>:
 8002dd4:	4b01      	ldr	r3, [pc, #4]	; (8002ddc <__errno+0x8>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000000c 	.word	0x2000000c

08002de0 <__libc_init_array>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	4d0d      	ldr	r5, [pc, #52]	; (8002e18 <__libc_init_array+0x38>)
 8002de4:	4c0d      	ldr	r4, [pc, #52]	; (8002e1c <__libc_init_array+0x3c>)
 8002de6:	1b64      	subs	r4, r4, r5
 8002de8:	10a4      	asrs	r4, r4, #2
 8002dea:	2600      	movs	r6, #0
 8002dec:	42a6      	cmp	r6, r4
 8002dee:	d109      	bne.n	8002e04 <__libc_init_array+0x24>
 8002df0:	4d0b      	ldr	r5, [pc, #44]	; (8002e20 <__libc_init_array+0x40>)
 8002df2:	4c0c      	ldr	r4, [pc, #48]	; (8002e24 <__libc_init_array+0x44>)
 8002df4:	f000 fd9c 	bl	8003930 <_init>
 8002df8:	1b64      	subs	r4, r4, r5
 8002dfa:	10a4      	asrs	r4, r4, #2
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	42a6      	cmp	r6, r4
 8002e00:	d105      	bne.n	8002e0e <__libc_init_array+0x2e>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e08:	4798      	blx	r3
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7ee      	b.n	8002dec <__libc_init_array+0xc>
 8002e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e12:	4798      	blx	r3
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7f2      	b.n	8002dfe <__libc_init_array+0x1e>
 8002e18:	080039cc 	.word	0x080039cc
 8002e1c:	080039cc 	.word	0x080039cc
 8002e20:	080039cc 	.word	0x080039cc
 8002e24:	080039d0 	.word	0x080039d0

08002e28 <memset>:
 8002e28:	4402      	add	r2, r0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d100      	bne.n	8002e32 <memset+0xa>
 8002e30:	4770      	bx	lr
 8002e32:	f803 1b01 	strb.w	r1, [r3], #1
 8002e36:	e7f9      	b.n	8002e2c <memset+0x4>

08002e38 <putchar>:
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <putchar+0x28>)
 8002e3a:	b513      	push	{r0, r1, r4, lr}
 8002e3c:	681c      	ldr	r4, [r3, #0]
 8002e3e:	4601      	mov	r1, r0
 8002e40:	b134      	cbz	r4, 8002e50 <putchar+0x18>
 8002e42:	69a3      	ldr	r3, [r4, #24]
 8002e44:	b923      	cbnz	r3, 8002e50 <putchar+0x18>
 8002e46:	9001      	str	r0, [sp, #4]
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f000 faab 	bl	80033a4 <__sinit>
 8002e4e:	9901      	ldr	r1, [sp, #4]
 8002e50:	68a2      	ldr	r2, [r4, #8]
 8002e52:	4620      	mov	r0, r4
 8002e54:	b002      	add	sp, #8
 8002e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e5a:	f000 bc59 	b.w	8003710 <_putc_r>
 8002e5e:	bf00      	nop
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <setvbuf>:
 8002e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e68:	461d      	mov	r5, r3
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <setvbuf+0x17c>)
 8002e6c:	681f      	ldr	r7, [r3, #0]
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460e      	mov	r6, r1
 8002e72:	4690      	mov	r8, r2
 8002e74:	b127      	cbz	r7, 8002e80 <setvbuf+0x1c>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	b913      	cbnz	r3, 8002e80 <setvbuf+0x1c>
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f000 fa92 	bl	80033a4 <__sinit>
 8002e80:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <setvbuf+0x180>)
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d167      	bne.n	8002f56 <setvbuf+0xf2>
 8002e86:	687c      	ldr	r4, [r7, #4]
 8002e88:	f1b8 0f02 	cmp.w	r8, #2
 8002e8c:	d006      	beq.n	8002e9c <setvbuf+0x38>
 8002e8e:	f1b8 0f01 	cmp.w	r8, #1
 8002e92:	f200 809f 	bhi.w	8002fd4 <setvbuf+0x170>
 8002e96:	2d00      	cmp	r5, #0
 8002e98:	f2c0 809c 	blt.w	8002fd4 <setvbuf+0x170>
 8002e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e9e:	07db      	lsls	r3, r3, #31
 8002ea0:	d405      	bmi.n	8002eae <setvbuf+0x4a>
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	0598      	lsls	r0, r3, #22
 8002ea6:	d402      	bmi.n	8002eae <setvbuf+0x4a>
 8002ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eaa:	f000 fb19 	bl	80034e0 <__retarget_lock_acquire_recursive>
 8002eae:	4621      	mov	r1, r4
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	f000 f9e3 	bl	800327c <_fflush_r>
 8002eb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eb8:	b141      	cbz	r1, 8002ecc <setvbuf+0x68>
 8002eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ebe:	4299      	cmp	r1, r3
 8002ec0:	d002      	beq.n	8002ec8 <setvbuf+0x64>
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f000 fb7a 	bl	80035bc <_free_r>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6363      	str	r3, [r4, #52]	; 0x34
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61a3      	str	r3, [r4, #24]
 8002ed0:	6063      	str	r3, [r4, #4]
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	0619      	lsls	r1, r3, #24
 8002ed6:	d503      	bpl.n	8002ee0 <setvbuf+0x7c>
 8002ed8:	6921      	ldr	r1, [r4, #16]
 8002eda:	4638      	mov	r0, r7
 8002edc:	f000 fb6e 	bl	80035bc <_free_r>
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
 8002ee2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f1b8 0f02 	cmp.w	r8, #2
 8002eee:	81a3      	strh	r3, [r4, #12]
 8002ef0:	d06c      	beq.n	8002fcc <setvbuf+0x168>
 8002ef2:	ab01      	add	r3, sp, #4
 8002ef4:	466a      	mov	r2, sp
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f000 faf3 	bl	80034e4 <__swhatbuf_r>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	4318      	orrs	r0, r3
 8002f02:	81a0      	strh	r0, [r4, #12]
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	d130      	bne.n	8002f6a <setvbuf+0x106>
 8002f08:	9d00      	ldr	r5, [sp, #0]
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f000 fb4e 	bl	80035ac <malloc>
 8002f10:	4606      	mov	r6, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d155      	bne.n	8002fc2 <setvbuf+0x15e>
 8002f16:	f8dd 9000 	ldr.w	r9, [sp]
 8002f1a:	45a9      	cmp	r9, r5
 8002f1c:	d14a      	bne.n	8002fb4 <setvbuf+0x150>
 8002f1e:	f04f 35ff 	mov.w	r5, #4294967295
 8002f22:	2200      	movs	r2, #0
 8002f24:	60a2      	str	r2, [r4, #8]
 8002f26:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f2a:	6022      	str	r2, [r4, #0]
 8002f2c:	6122      	str	r2, [r4, #16]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f34:	6162      	str	r2, [r4, #20]
 8002f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	07d2      	lsls	r2, r2, #31
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	d405      	bmi.n	8002f4e <setvbuf+0xea>
 8002f42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f46:	d102      	bne.n	8002f4e <setvbuf+0xea>
 8002f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f4a:	f000 faca 	bl	80034e2 <__retarget_lock_release_recursive>
 8002f4e:	4628      	mov	r0, r5
 8002f50:	b003      	add	sp, #12
 8002f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <setvbuf+0x184>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d101      	bne.n	8002f60 <setvbuf+0xfc>
 8002f5c:	68bc      	ldr	r4, [r7, #8]
 8002f5e:	e793      	b.n	8002e88 <setvbuf+0x24>
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <setvbuf+0x188>)
 8002f62:	429c      	cmp	r4, r3
 8002f64:	bf08      	it	eq
 8002f66:	68fc      	ldreq	r4, [r7, #12]
 8002f68:	e78e      	b.n	8002e88 <setvbuf+0x24>
 8002f6a:	2e00      	cmp	r6, #0
 8002f6c:	d0cd      	beq.n	8002f0a <setvbuf+0xa6>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	b913      	cbnz	r3, 8002f78 <setvbuf+0x114>
 8002f72:	4638      	mov	r0, r7
 8002f74:	f000 fa16 	bl	80033a4 <__sinit>
 8002f78:	f1b8 0f01 	cmp.w	r8, #1
 8002f7c:	bf08      	it	eq
 8002f7e:	89a3      	ldrheq	r3, [r4, #12]
 8002f80:	6026      	str	r6, [r4, #0]
 8002f82:	bf04      	itt	eq
 8002f84:	f043 0301 	orreq.w	r3, r3, #1
 8002f88:	81a3      	strheq	r3, [r4, #12]
 8002f8a:	89a2      	ldrh	r2, [r4, #12]
 8002f8c:	f012 0308 	ands.w	r3, r2, #8
 8002f90:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002f94:	d01c      	beq.n	8002fd0 <setvbuf+0x16c>
 8002f96:	07d3      	lsls	r3, r2, #31
 8002f98:	bf41      	itttt	mi
 8002f9a:	2300      	movmi	r3, #0
 8002f9c:	426d      	negmi	r5, r5
 8002f9e:	60a3      	strmi	r3, [r4, #8]
 8002fa0:	61a5      	strmi	r5, [r4, #24]
 8002fa2:	bf58      	it	pl
 8002fa4:	60a5      	strpl	r5, [r4, #8]
 8002fa6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002fa8:	f015 0501 	ands.w	r5, r5, #1
 8002fac:	d115      	bne.n	8002fda <setvbuf+0x176>
 8002fae:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002fb2:	e7c8      	b.n	8002f46 <setvbuf+0xe2>
 8002fb4:	4648      	mov	r0, r9
 8002fb6:	f000 faf9 	bl	80035ac <malloc>
 8002fba:	4606      	mov	r6, r0
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d0ae      	beq.n	8002f1e <setvbuf+0xba>
 8002fc0:	464d      	mov	r5, r9
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	e7d0      	b.n	8002f6e <setvbuf+0x10a>
 8002fcc:	2500      	movs	r5, #0
 8002fce:	e7a8      	b.n	8002f22 <setvbuf+0xbe>
 8002fd0:	60a3      	str	r3, [r4, #8]
 8002fd2:	e7e8      	b.n	8002fa6 <setvbuf+0x142>
 8002fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8002fd8:	e7b9      	b.n	8002f4e <setvbuf+0xea>
 8002fda:	2500      	movs	r5, #0
 8002fdc:	e7b7      	b.n	8002f4e <setvbuf+0xea>
 8002fde:	bf00      	nop
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	08003984 	.word	0x08003984
 8002fe8:	080039a4 	.word	0x080039a4
 8002fec:	08003964 	.word	0x08003964

08002ff0 <__swbuf_r>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	460e      	mov	r6, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	b118      	cbz	r0, 8003002 <__swbuf_r+0x12>
 8002ffa:	6983      	ldr	r3, [r0, #24]
 8002ffc:	b90b      	cbnz	r3, 8003002 <__swbuf_r+0x12>
 8002ffe:	f000 f9d1 	bl	80033a4 <__sinit>
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <__swbuf_r+0x98>)
 8003004:	429c      	cmp	r4, r3
 8003006:	d12b      	bne.n	8003060 <__swbuf_r+0x70>
 8003008:	686c      	ldr	r4, [r5, #4]
 800300a:	69a3      	ldr	r3, [r4, #24]
 800300c:	60a3      	str	r3, [r4, #8]
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	071a      	lsls	r2, r3, #28
 8003012:	d52f      	bpl.n	8003074 <__swbuf_r+0x84>
 8003014:	6923      	ldr	r3, [r4, #16]
 8003016:	b36b      	cbz	r3, 8003074 <__swbuf_r+0x84>
 8003018:	6923      	ldr	r3, [r4, #16]
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	1ac0      	subs	r0, r0, r3
 800301e:	6963      	ldr	r3, [r4, #20]
 8003020:	b2f6      	uxtb	r6, r6
 8003022:	4283      	cmp	r3, r0
 8003024:	4637      	mov	r7, r6
 8003026:	dc04      	bgt.n	8003032 <__swbuf_r+0x42>
 8003028:	4621      	mov	r1, r4
 800302a:	4628      	mov	r0, r5
 800302c:	f000 f926 	bl	800327c <_fflush_r>
 8003030:	bb30      	cbnz	r0, 8003080 <__swbuf_r+0x90>
 8003032:	68a3      	ldr	r3, [r4, #8]
 8003034:	3b01      	subs	r3, #1
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	6022      	str	r2, [r4, #0]
 800303e:	701e      	strb	r6, [r3, #0]
 8003040:	6963      	ldr	r3, [r4, #20]
 8003042:	3001      	adds	r0, #1
 8003044:	4283      	cmp	r3, r0
 8003046:	d004      	beq.n	8003052 <__swbuf_r+0x62>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	07db      	lsls	r3, r3, #31
 800304c:	d506      	bpl.n	800305c <__swbuf_r+0x6c>
 800304e:	2e0a      	cmp	r6, #10
 8003050:	d104      	bne.n	800305c <__swbuf_r+0x6c>
 8003052:	4621      	mov	r1, r4
 8003054:	4628      	mov	r0, r5
 8003056:	f000 f911 	bl	800327c <_fflush_r>
 800305a:	b988      	cbnz	r0, 8003080 <__swbuf_r+0x90>
 800305c:	4638      	mov	r0, r7
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <__swbuf_r+0x9c>)
 8003062:	429c      	cmp	r4, r3
 8003064:	d101      	bne.n	800306a <__swbuf_r+0x7a>
 8003066:	68ac      	ldr	r4, [r5, #8]
 8003068:	e7cf      	b.n	800300a <__swbuf_r+0x1a>
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <__swbuf_r+0xa0>)
 800306c:	429c      	cmp	r4, r3
 800306e:	bf08      	it	eq
 8003070:	68ec      	ldreq	r4, [r5, #12]
 8003072:	e7ca      	b.n	800300a <__swbuf_r+0x1a>
 8003074:	4621      	mov	r1, r4
 8003076:	4628      	mov	r0, r5
 8003078:	f000 f80c 	bl	8003094 <__swsetup_r>
 800307c:	2800      	cmp	r0, #0
 800307e:	d0cb      	beq.n	8003018 <__swbuf_r+0x28>
 8003080:	f04f 37ff 	mov.w	r7, #4294967295
 8003084:	e7ea      	b.n	800305c <__swbuf_r+0x6c>
 8003086:	bf00      	nop
 8003088:	08003984 	.word	0x08003984
 800308c:	080039a4 	.word	0x080039a4
 8003090:	08003964 	.word	0x08003964

08003094 <__swsetup_r>:
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <__swsetup_r+0xcc>)
 8003096:	b570      	push	{r4, r5, r6, lr}
 8003098:	681d      	ldr	r5, [r3, #0]
 800309a:	4606      	mov	r6, r0
 800309c:	460c      	mov	r4, r1
 800309e:	b125      	cbz	r5, 80030aa <__swsetup_r+0x16>
 80030a0:	69ab      	ldr	r3, [r5, #24]
 80030a2:	b913      	cbnz	r3, 80030aa <__swsetup_r+0x16>
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f97d 	bl	80033a4 <__sinit>
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <__swsetup_r+0xd0>)
 80030ac:	429c      	cmp	r4, r3
 80030ae:	d10f      	bne.n	80030d0 <__swsetup_r+0x3c>
 80030b0:	686c      	ldr	r4, [r5, #4]
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030b8:	0719      	lsls	r1, r3, #28
 80030ba:	d42c      	bmi.n	8003116 <__swsetup_r+0x82>
 80030bc:	06dd      	lsls	r5, r3, #27
 80030be:	d411      	bmi.n	80030e4 <__swsetup_r+0x50>
 80030c0:	2309      	movs	r3, #9
 80030c2:	6033      	str	r3, [r6, #0]
 80030c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	f04f 30ff 	mov.w	r0, #4294967295
 80030ce:	e03e      	b.n	800314e <__swsetup_r+0xba>
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <__swsetup_r+0xd4>)
 80030d2:	429c      	cmp	r4, r3
 80030d4:	d101      	bne.n	80030da <__swsetup_r+0x46>
 80030d6:	68ac      	ldr	r4, [r5, #8]
 80030d8:	e7eb      	b.n	80030b2 <__swsetup_r+0x1e>
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <__swsetup_r+0xd8>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	bf08      	it	eq
 80030e0:	68ec      	ldreq	r4, [r5, #12]
 80030e2:	e7e6      	b.n	80030b2 <__swsetup_r+0x1e>
 80030e4:	0758      	lsls	r0, r3, #29
 80030e6:	d512      	bpl.n	800310e <__swsetup_r+0x7a>
 80030e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ea:	b141      	cbz	r1, 80030fe <__swsetup_r+0x6a>
 80030ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030f0:	4299      	cmp	r1, r3
 80030f2:	d002      	beq.n	80030fa <__swsetup_r+0x66>
 80030f4:	4630      	mov	r0, r6
 80030f6:	f000 fa61 	bl	80035bc <_free_r>
 80030fa:	2300      	movs	r3, #0
 80030fc:	6363      	str	r3, [r4, #52]	; 0x34
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	6063      	str	r3, [r4, #4]
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	f043 0308 	orr.w	r3, r3, #8
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	b94b      	cbnz	r3, 800312e <__swsetup_r+0x9a>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003124:	d003      	beq.n	800312e <__swsetup_r+0x9a>
 8003126:	4621      	mov	r1, r4
 8003128:	4630      	mov	r0, r6
 800312a:	f000 f9ff 	bl	800352c <__smakebuf_r>
 800312e:	89a0      	ldrh	r0, [r4, #12]
 8003130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003134:	f010 0301 	ands.w	r3, r0, #1
 8003138:	d00a      	beq.n	8003150 <__swsetup_r+0xbc>
 800313a:	2300      	movs	r3, #0
 800313c:	60a3      	str	r3, [r4, #8]
 800313e:	6963      	ldr	r3, [r4, #20]
 8003140:	425b      	negs	r3, r3
 8003142:	61a3      	str	r3, [r4, #24]
 8003144:	6923      	ldr	r3, [r4, #16]
 8003146:	b943      	cbnz	r3, 800315a <__swsetup_r+0xc6>
 8003148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800314c:	d1ba      	bne.n	80030c4 <__swsetup_r+0x30>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	0781      	lsls	r1, r0, #30
 8003152:	bf58      	it	pl
 8003154:	6963      	ldrpl	r3, [r4, #20]
 8003156:	60a3      	str	r3, [r4, #8]
 8003158:	e7f4      	b.n	8003144 <__swsetup_r+0xb0>
 800315a:	2000      	movs	r0, #0
 800315c:	e7f7      	b.n	800314e <__swsetup_r+0xba>
 800315e:	bf00      	nop
 8003160:	2000000c 	.word	0x2000000c
 8003164:	08003984 	.word	0x08003984
 8003168:	080039a4 	.word	0x080039a4
 800316c:	08003964 	.word	0x08003964

08003170 <__sflush_r>:
 8003170:	898a      	ldrh	r2, [r1, #12]
 8003172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003176:	4605      	mov	r5, r0
 8003178:	0710      	lsls	r0, r2, #28
 800317a:	460c      	mov	r4, r1
 800317c:	d458      	bmi.n	8003230 <__sflush_r+0xc0>
 800317e:	684b      	ldr	r3, [r1, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	dc05      	bgt.n	8003190 <__sflush_r+0x20>
 8003184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	dc02      	bgt.n	8003190 <__sflush_r+0x20>
 800318a:	2000      	movs	r0, #0
 800318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003192:	2e00      	cmp	r6, #0
 8003194:	d0f9      	beq.n	800318a <__sflush_r+0x1a>
 8003196:	2300      	movs	r3, #0
 8003198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800319c:	682f      	ldr	r7, [r5, #0]
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	d032      	beq.n	8003208 <__sflush_r+0x98>
 80031a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	075a      	lsls	r2, r3, #29
 80031a8:	d505      	bpl.n	80031b6 <__sflush_r+0x46>
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	1ac0      	subs	r0, r0, r3
 80031ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031b0:	b10b      	cbz	r3, 80031b6 <__sflush_r+0x46>
 80031b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b4:	1ac0      	subs	r0, r0, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	4602      	mov	r2, r0
 80031ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031bc:	6a21      	ldr	r1, [r4, #32]
 80031be:	4628      	mov	r0, r5
 80031c0:	47b0      	blx	r6
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	d106      	bne.n	80031d6 <__sflush_r+0x66>
 80031c8:	6829      	ldr	r1, [r5, #0]
 80031ca:	291d      	cmp	r1, #29
 80031cc:	d82c      	bhi.n	8003228 <__sflush_r+0xb8>
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <__sflush_r+0x108>)
 80031d0:	40ca      	lsrs	r2, r1
 80031d2:	07d6      	lsls	r6, r2, #31
 80031d4:	d528      	bpl.n	8003228 <__sflush_r+0xb8>
 80031d6:	2200      	movs	r2, #0
 80031d8:	6062      	str	r2, [r4, #4]
 80031da:	04d9      	lsls	r1, r3, #19
 80031dc:	6922      	ldr	r2, [r4, #16]
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	d504      	bpl.n	80031ec <__sflush_r+0x7c>
 80031e2:	1c42      	adds	r2, r0, #1
 80031e4:	d101      	bne.n	80031ea <__sflush_r+0x7a>
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	b903      	cbnz	r3, 80031ec <__sflush_r+0x7c>
 80031ea:	6560      	str	r0, [r4, #84]	; 0x54
 80031ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031ee:	602f      	str	r7, [r5, #0]
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d0ca      	beq.n	800318a <__sflush_r+0x1a>
 80031f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031f8:	4299      	cmp	r1, r3
 80031fa:	d002      	beq.n	8003202 <__sflush_r+0x92>
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f9dd 	bl	80035bc <_free_r>
 8003202:	2000      	movs	r0, #0
 8003204:	6360      	str	r0, [r4, #52]	; 0x34
 8003206:	e7c1      	b.n	800318c <__sflush_r+0x1c>
 8003208:	6a21      	ldr	r1, [r4, #32]
 800320a:	2301      	movs	r3, #1
 800320c:	4628      	mov	r0, r5
 800320e:	47b0      	blx	r6
 8003210:	1c41      	adds	r1, r0, #1
 8003212:	d1c7      	bne.n	80031a4 <__sflush_r+0x34>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0c4      	beq.n	80031a4 <__sflush_r+0x34>
 800321a:	2b1d      	cmp	r3, #29
 800321c:	d001      	beq.n	8003222 <__sflush_r+0xb2>
 800321e:	2b16      	cmp	r3, #22
 8003220:	d101      	bne.n	8003226 <__sflush_r+0xb6>
 8003222:	602f      	str	r7, [r5, #0]
 8003224:	e7b1      	b.n	800318a <__sflush_r+0x1a>
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	e7ad      	b.n	800318c <__sflush_r+0x1c>
 8003230:	690f      	ldr	r7, [r1, #16]
 8003232:	2f00      	cmp	r7, #0
 8003234:	d0a9      	beq.n	800318a <__sflush_r+0x1a>
 8003236:	0793      	lsls	r3, r2, #30
 8003238:	680e      	ldr	r6, [r1, #0]
 800323a:	bf08      	it	eq
 800323c:	694b      	ldreq	r3, [r1, #20]
 800323e:	600f      	str	r7, [r1, #0]
 8003240:	bf18      	it	ne
 8003242:	2300      	movne	r3, #0
 8003244:	eba6 0807 	sub.w	r8, r6, r7
 8003248:	608b      	str	r3, [r1, #8]
 800324a:	f1b8 0f00 	cmp.w	r8, #0
 800324e:	dd9c      	ble.n	800318a <__sflush_r+0x1a>
 8003250:	6a21      	ldr	r1, [r4, #32]
 8003252:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003254:	4643      	mov	r3, r8
 8003256:	463a      	mov	r2, r7
 8003258:	4628      	mov	r0, r5
 800325a:	47b0      	blx	r6
 800325c:	2800      	cmp	r0, #0
 800325e:	dc06      	bgt.n	800326e <__sflush_r+0xfe>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	e78e      	b.n	800318c <__sflush_r+0x1c>
 800326e:	4407      	add	r7, r0
 8003270:	eba8 0800 	sub.w	r8, r8, r0
 8003274:	e7e9      	b.n	800324a <__sflush_r+0xda>
 8003276:	bf00      	nop
 8003278:	20400001 	.word	0x20400001

0800327c <_fflush_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	690b      	ldr	r3, [r1, #16]
 8003280:	4605      	mov	r5, r0
 8003282:	460c      	mov	r4, r1
 8003284:	b913      	cbnz	r3, 800328c <_fflush_r+0x10>
 8003286:	2500      	movs	r5, #0
 8003288:	4628      	mov	r0, r5
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	b118      	cbz	r0, 8003296 <_fflush_r+0x1a>
 800328e:	6983      	ldr	r3, [r0, #24]
 8003290:	b90b      	cbnz	r3, 8003296 <_fflush_r+0x1a>
 8003292:	f000 f887 	bl	80033a4 <__sinit>
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <_fflush_r+0x6c>)
 8003298:	429c      	cmp	r4, r3
 800329a:	d11b      	bne.n	80032d4 <_fflush_r+0x58>
 800329c:	686c      	ldr	r4, [r5, #4]
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ef      	beq.n	8003286 <_fflush_r+0xa>
 80032a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d404      	bmi.n	80032b6 <_fflush_r+0x3a>
 80032ac:	0599      	lsls	r1, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_fflush_r+0x3a>
 80032b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b2:	f000 f915 	bl	80034e0 <__retarget_lock_acquire_recursive>
 80032b6:	4628      	mov	r0, r5
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7ff ff59 	bl	8003170 <__sflush_r>
 80032be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032c0:	07da      	lsls	r2, r3, #31
 80032c2:	4605      	mov	r5, r0
 80032c4:	d4e0      	bmi.n	8003288 <_fflush_r+0xc>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	d4dd      	bmi.n	8003288 <_fflush_r+0xc>
 80032cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ce:	f000 f908 	bl	80034e2 <__retarget_lock_release_recursive>
 80032d2:	e7d9      	b.n	8003288 <_fflush_r+0xc>
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <_fflush_r+0x70>)
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d101      	bne.n	80032de <_fflush_r+0x62>
 80032da:	68ac      	ldr	r4, [r5, #8]
 80032dc:	e7df      	b.n	800329e <_fflush_r+0x22>
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <_fflush_r+0x74>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	bf08      	it	eq
 80032e4:	68ec      	ldreq	r4, [r5, #12]
 80032e6:	e7da      	b.n	800329e <_fflush_r+0x22>
 80032e8:	08003984 	.word	0x08003984
 80032ec:	080039a4 	.word	0x080039a4
 80032f0:	08003964 	.word	0x08003964

080032f4 <std>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	e9c0 3300 	strd	r3, r3, [r0]
 80032fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003302:	6083      	str	r3, [r0, #8]
 8003304:	8181      	strh	r1, [r0, #12]
 8003306:	6643      	str	r3, [r0, #100]	; 0x64
 8003308:	81c2      	strh	r2, [r0, #14]
 800330a:	6183      	str	r3, [r0, #24]
 800330c:	4619      	mov	r1, r3
 800330e:	2208      	movs	r2, #8
 8003310:	305c      	adds	r0, #92	; 0x5c
 8003312:	f7ff fd89 	bl	8002e28 <memset>
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <std+0x38>)
 8003318:	6263      	str	r3, [r4, #36]	; 0x24
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <std+0x3c>)
 800331c:	62a3      	str	r3, [r4, #40]	; 0x28
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <std+0x40>)
 8003320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x44>)
 8003324:	6224      	str	r4, [r4, #32]
 8003326:	6323      	str	r3, [r4, #48]	; 0x30
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	080037c1 	.word	0x080037c1
 8003330:	080037e3 	.word	0x080037e3
 8003334:	0800381b 	.word	0x0800381b
 8003338:	0800383f 	.word	0x0800383f

0800333c <_cleanup_r>:
 800333c:	4901      	ldr	r1, [pc, #4]	; (8003344 <_cleanup_r+0x8>)
 800333e:	f000 b8af 	b.w	80034a0 <_fwalk_reent>
 8003342:	bf00      	nop
 8003344:	0800327d 	.word	0x0800327d

08003348 <__sfmoreglue>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	1e4a      	subs	r2, r1, #1
 800334c:	2568      	movs	r5, #104	; 0x68
 800334e:	4355      	muls	r5, r2
 8003350:	460e      	mov	r6, r1
 8003352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003356:	f000 f981 	bl	800365c <_malloc_r>
 800335a:	4604      	mov	r4, r0
 800335c:	b140      	cbz	r0, 8003370 <__sfmoreglue+0x28>
 800335e:	2100      	movs	r1, #0
 8003360:	e9c0 1600 	strd	r1, r6, [r0]
 8003364:	300c      	adds	r0, #12
 8003366:	60a0      	str	r0, [r4, #8]
 8003368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800336c:	f7ff fd5c 	bl	8002e28 <memset>
 8003370:	4620      	mov	r0, r4
 8003372:	bd70      	pop	{r4, r5, r6, pc}

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 b8b3 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200000f5 	.word	0x200000f5

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 b8ae 	b.w	80034e2 <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200000f5 	.word	0x200000f5

0800338c <__sinit_lock_acquire>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__sinit_lock_acquire+0x8>)
 800338e:	f000 b8a7 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 8003392:	bf00      	nop
 8003394:	200000f0 	.word	0x200000f0

08003398 <__sinit_lock_release>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sinit_lock_release+0x8>)
 800339a:	f000 b8a2 	b.w	80034e2 <__retarget_lock_release_recursive>
 800339e:	bf00      	nop
 80033a0:	200000f0 	.word	0x200000f0

080033a4 <__sinit>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	f7ff fff0 	bl	800338c <__sinit_lock_acquire>
 80033ac:	69a3      	ldr	r3, [r4, #24]
 80033ae:	b11b      	cbz	r3, 80033b8 <__sinit+0x14>
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	f7ff bff0 	b.w	8003398 <__sinit_lock_release>
 80033b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033bc:	6523      	str	r3, [r4, #80]	; 0x50
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <__sinit+0x68>)
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <__sinit+0x6c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80033c6:	42a3      	cmp	r3, r4
 80033c8:	bf04      	itt	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	61a3      	streq	r3, [r4, #24]
 80033ce:	4620      	mov	r0, r4
 80033d0:	f000 f820 	bl	8003414 <__sfp>
 80033d4:	6060      	str	r0, [r4, #4]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 f81c 	bl	8003414 <__sfp>
 80033dc:	60a0      	str	r0, [r4, #8]
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 f818 	bl	8003414 <__sfp>
 80033e4:	2200      	movs	r2, #0
 80033e6:	60e0      	str	r0, [r4, #12]
 80033e8:	2104      	movs	r1, #4
 80033ea:	6860      	ldr	r0, [r4, #4]
 80033ec:	f7ff ff82 	bl	80032f4 <std>
 80033f0:	68a0      	ldr	r0, [r4, #8]
 80033f2:	2201      	movs	r2, #1
 80033f4:	2109      	movs	r1, #9
 80033f6:	f7ff ff7d 	bl	80032f4 <std>
 80033fa:	68e0      	ldr	r0, [r4, #12]
 80033fc:	2202      	movs	r2, #2
 80033fe:	2112      	movs	r1, #18
 8003400:	f7ff ff78 	bl	80032f4 <std>
 8003404:	2301      	movs	r3, #1
 8003406:	61a3      	str	r3, [r4, #24]
 8003408:	e7d2      	b.n	80033b0 <__sinit+0xc>
 800340a:	bf00      	nop
 800340c:	08003960 	.word	0x08003960
 8003410:	0800333d 	.word	0x0800333d

08003414 <__sfp>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	4607      	mov	r7, r0
 8003418:	f7ff ffac 	bl	8003374 <__sfp_lock_acquire>
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <__sfp+0x84>)
 800341e:	681e      	ldr	r6, [r3, #0]
 8003420:	69b3      	ldr	r3, [r6, #24]
 8003422:	b913      	cbnz	r3, 800342a <__sfp+0x16>
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff ffbd 	bl	80033a4 <__sinit>
 800342a:	3648      	adds	r6, #72	; 0x48
 800342c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003430:	3b01      	subs	r3, #1
 8003432:	d503      	bpl.n	800343c <__sfp+0x28>
 8003434:	6833      	ldr	r3, [r6, #0]
 8003436:	b30b      	cbz	r3, 800347c <__sfp+0x68>
 8003438:	6836      	ldr	r6, [r6, #0]
 800343a:	e7f7      	b.n	800342c <__sfp+0x18>
 800343c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003440:	b9d5      	cbnz	r5, 8003478 <__sfp+0x64>
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <__sfp+0x88>)
 8003444:	60e3      	str	r3, [r4, #12]
 8003446:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800344a:	6665      	str	r5, [r4, #100]	; 0x64
 800344c:	f000 f847 	bl	80034de <__retarget_lock_init_recursive>
 8003450:	f7ff ff96 	bl	8003380 <__sfp_lock_release>
 8003454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800345c:	6025      	str	r5, [r4, #0]
 800345e:	61a5      	str	r5, [r4, #24]
 8003460:	2208      	movs	r2, #8
 8003462:	4629      	mov	r1, r5
 8003464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003468:	f7ff fcde 	bl	8002e28 <memset>
 800346c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003474:	4620      	mov	r0, r4
 8003476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003478:	3468      	adds	r4, #104	; 0x68
 800347a:	e7d9      	b.n	8003430 <__sfp+0x1c>
 800347c:	2104      	movs	r1, #4
 800347e:	4638      	mov	r0, r7
 8003480:	f7ff ff62 	bl	8003348 <__sfmoreglue>
 8003484:	4604      	mov	r4, r0
 8003486:	6030      	str	r0, [r6, #0]
 8003488:	2800      	cmp	r0, #0
 800348a:	d1d5      	bne.n	8003438 <__sfp+0x24>
 800348c:	f7ff ff78 	bl	8003380 <__sfp_lock_release>
 8003490:	230c      	movs	r3, #12
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	e7ee      	b.n	8003474 <__sfp+0x60>
 8003496:	bf00      	nop
 8003498:	08003960 	.word	0x08003960
 800349c:	ffff0001 	.word	0xffff0001

080034a0 <_fwalk_reent>:
 80034a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a4:	4606      	mov	r6, r0
 80034a6:	4688      	mov	r8, r1
 80034a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034ac:	2700      	movs	r7, #0
 80034ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034b2:	f1b9 0901 	subs.w	r9, r9, #1
 80034b6:	d505      	bpl.n	80034c4 <_fwalk_reent+0x24>
 80034b8:	6824      	ldr	r4, [r4, #0]
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	d1f7      	bne.n	80034ae <_fwalk_reent+0xe>
 80034be:	4638      	mov	r0, r7
 80034c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034c4:	89ab      	ldrh	r3, [r5, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d907      	bls.n	80034da <_fwalk_reent+0x3a>
 80034ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d003      	beq.n	80034da <_fwalk_reent+0x3a>
 80034d2:	4629      	mov	r1, r5
 80034d4:	4630      	mov	r0, r6
 80034d6:	47c0      	blx	r8
 80034d8:	4307      	orrs	r7, r0
 80034da:	3568      	adds	r5, #104	; 0x68
 80034dc:	e7e9      	b.n	80034b2 <_fwalk_reent+0x12>

080034de <__retarget_lock_init_recursive>:
 80034de:	4770      	bx	lr

080034e0 <__retarget_lock_acquire_recursive>:
 80034e0:	4770      	bx	lr

080034e2 <__retarget_lock_release_recursive>:
 80034e2:	4770      	bx	lr

080034e4 <__swhatbuf_r>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	460e      	mov	r6, r1
 80034e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ec:	2900      	cmp	r1, #0
 80034ee:	b096      	sub	sp, #88	; 0x58
 80034f0:	4614      	mov	r4, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	da07      	bge.n	8003506 <__swhatbuf_r+0x22>
 80034f6:	2300      	movs	r3, #0
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	89b3      	ldrh	r3, [r6, #12]
 80034fc:	061a      	lsls	r2, r3, #24
 80034fe:	d410      	bmi.n	8003522 <__swhatbuf_r+0x3e>
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	e00e      	b.n	8003524 <__swhatbuf_r+0x40>
 8003506:	466a      	mov	r2, sp
 8003508:	f000 f9c0 	bl	800388c <_fstat_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	dbf2      	blt.n	80034f6 <__swhatbuf_r+0x12>
 8003510:	9a01      	ldr	r2, [sp, #4]
 8003512:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003516:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800351a:	425a      	negs	r2, r3
 800351c:	415a      	adcs	r2, r3
 800351e:	602a      	str	r2, [r5, #0]
 8003520:	e7ee      	b.n	8003500 <__swhatbuf_r+0x1c>
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	2000      	movs	r0, #0
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	b016      	add	sp, #88	; 0x58
 800352a:	bd70      	pop	{r4, r5, r6, pc}

0800352c <__smakebuf_r>:
 800352c:	898b      	ldrh	r3, [r1, #12]
 800352e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003530:	079d      	lsls	r5, r3, #30
 8003532:	4606      	mov	r6, r0
 8003534:	460c      	mov	r4, r1
 8003536:	d507      	bpl.n	8003548 <__smakebuf_r+0x1c>
 8003538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	6123      	str	r3, [r4, #16]
 8003540:	2301      	movs	r3, #1
 8003542:	6163      	str	r3, [r4, #20]
 8003544:	b002      	add	sp, #8
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	ab01      	add	r3, sp, #4
 800354a:	466a      	mov	r2, sp
 800354c:	f7ff ffca 	bl	80034e4 <__swhatbuf_r>
 8003550:	9900      	ldr	r1, [sp, #0]
 8003552:	4605      	mov	r5, r0
 8003554:	4630      	mov	r0, r6
 8003556:	f000 f881 	bl	800365c <_malloc_r>
 800355a:	b948      	cbnz	r0, 8003570 <__smakebuf_r+0x44>
 800355c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003560:	059a      	lsls	r2, r3, #22
 8003562:	d4ef      	bmi.n	8003544 <__smakebuf_r+0x18>
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	e7e3      	b.n	8003538 <__smakebuf_r+0xc>
 8003570:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <__smakebuf_r+0x7c>)
 8003572:	62b3      	str	r3, [r6, #40]	; 0x28
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	6020      	str	r0, [r4, #0]
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	9b00      	ldr	r3, [sp, #0]
 8003580:	6163      	str	r3, [r4, #20]
 8003582:	9b01      	ldr	r3, [sp, #4]
 8003584:	6120      	str	r0, [r4, #16]
 8003586:	b15b      	cbz	r3, 80035a0 <__smakebuf_r+0x74>
 8003588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800358c:	4630      	mov	r0, r6
 800358e:	f000 f98f 	bl	80038b0 <_isatty_r>
 8003592:	b128      	cbz	r0, 80035a0 <__smakebuf_r+0x74>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	89a0      	ldrh	r0, [r4, #12]
 80035a2:	4305      	orrs	r5, r0
 80035a4:	81a5      	strh	r5, [r4, #12]
 80035a6:	e7cd      	b.n	8003544 <__smakebuf_r+0x18>
 80035a8:	0800333d 	.word	0x0800333d

080035ac <malloc>:
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <malloc+0xc>)
 80035ae:	4601      	mov	r1, r0
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	f000 b853 	b.w	800365c <_malloc_r>
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <_free_r>:
 80035bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035be:	2900      	cmp	r1, #0
 80035c0:	d048      	beq.n	8003654 <_free_r+0x98>
 80035c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c6:	9001      	str	r0, [sp, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f1a1 0404 	sub.w	r4, r1, #4
 80035ce:	bfb8      	it	lt
 80035d0:	18e4      	addlt	r4, r4, r3
 80035d2:	f000 f98f 	bl	80038f4 <__malloc_lock>
 80035d6:	4a20      	ldr	r2, [pc, #128]	; (8003658 <_free_r+0x9c>)
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	4615      	mov	r5, r2
 80035de:	b933      	cbnz	r3, 80035ee <_free_r+0x32>
 80035e0:	6063      	str	r3, [r4, #4]
 80035e2:	6014      	str	r4, [r2, #0]
 80035e4:	b003      	add	sp, #12
 80035e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035ea:	f000 b989 	b.w	8003900 <__malloc_unlock>
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	d90b      	bls.n	800360a <_free_r+0x4e>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	1862      	adds	r2, r4, r1
 80035f6:	4293      	cmp	r3, r2
 80035f8:	bf04      	itt	eq
 80035fa:	681a      	ldreq	r2, [r3, #0]
 80035fc:	685b      	ldreq	r3, [r3, #4]
 80035fe:	6063      	str	r3, [r4, #4]
 8003600:	bf04      	itt	eq
 8003602:	1852      	addeq	r2, r2, r1
 8003604:	6022      	streq	r2, [r4, #0]
 8003606:	602c      	str	r4, [r5, #0]
 8003608:	e7ec      	b.n	80035e4 <_free_r+0x28>
 800360a:	461a      	mov	r2, r3
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b10b      	cbz	r3, 8003614 <_free_r+0x58>
 8003610:	42a3      	cmp	r3, r4
 8003612:	d9fa      	bls.n	800360a <_free_r+0x4e>
 8003614:	6811      	ldr	r1, [r2, #0]
 8003616:	1855      	adds	r5, r2, r1
 8003618:	42a5      	cmp	r5, r4
 800361a:	d10b      	bne.n	8003634 <_free_r+0x78>
 800361c:	6824      	ldr	r4, [r4, #0]
 800361e:	4421      	add	r1, r4
 8003620:	1854      	adds	r4, r2, r1
 8003622:	42a3      	cmp	r3, r4
 8003624:	6011      	str	r1, [r2, #0]
 8003626:	d1dd      	bne.n	80035e4 <_free_r+0x28>
 8003628:	681c      	ldr	r4, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	6053      	str	r3, [r2, #4]
 800362e:	4421      	add	r1, r4
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	e7d7      	b.n	80035e4 <_free_r+0x28>
 8003634:	d902      	bls.n	800363c <_free_r+0x80>
 8003636:	230c      	movs	r3, #12
 8003638:	6003      	str	r3, [r0, #0]
 800363a:	e7d3      	b.n	80035e4 <_free_r+0x28>
 800363c:	6825      	ldr	r5, [r4, #0]
 800363e:	1961      	adds	r1, r4, r5
 8003640:	428b      	cmp	r3, r1
 8003642:	bf04      	itt	eq
 8003644:	6819      	ldreq	r1, [r3, #0]
 8003646:	685b      	ldreq	r3, [r3, #4]
 8003648:	6063      	str	r3, [r4, #4]
 800364a:	bf04      	itt	eq
 800364c:	1949      	addeq	r1, r1, r5
 800364e:	6021      	streq	r1, [r4, #0]
 8003650:	6054      	str	r4, [r2, #4]
 8003652:	e7c7      	b.n	80035e4 <_free_r+0x28>
 8003654:	b003      	add	sp, #12
 8003656:	bd30      	pop	{r4, r5, pc}
 8003658:	20000094 	.word	0x20000094

0800365c <_malloc_r>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	1ccd      	adds	r5, r1, #3
 8003660:	f025 0503 	bic.w	r5, r5, #3
 8003664:	3508      	adds	r5, #8
 8003666:	2d0c      	cmp	r5, #12
 8003668:	bf38      	it	cc
 800366a:	250c      	movcc	r5, #12
 800366c:	2d00      	cmp	r5, #0
 800366e:	4606      	mov	r6, r0
 8003670:	db01      	blt.n	8003676 <_malloc_r+0x1a>
 8003672:	42a9      	cmp	r1, r5
 8003674:	d903      	bls.n	800367e <_malloc_r+0x22>
 8003676:	230c      	movs	r3, #12
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	2000      	movs	r0, #0
 800367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800367e:	f000 f939 	bl	80038f4 <__malloc_lock>
 8003682:	4921      	ldr	r1, [pc, #132]	; (8003708 <_malloc_r+0xac>)
 8003684:	680a      	ldr	r2, [r1, #0]
 8003686:	4614      	mov	r4, r2
 8003688:	b99c      	cbnz	r4, 80036b2 <_malloc_r+0x56>
 800368a:	4f20      	ldr	r7, [pc, #128]	; (800370c <_malloc_r+0xb0>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b923      	cbnz	r3, 800369a <_malloc_r+0x3e>
 8003690:	4621      	mov	r1, r4
 8003692:	4630      	mov	r0, r6
 8003694:	f000 f884 	bl	80037a0 <_sbrk_r>
 8003698:	6038      	str	r0, [r7, #0]
 800369a:	4629      	mov	r1, r5
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f87f 	bl	80037a0 <_sbrk_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d123      	bne.n	80036ee <_malloc_r+0x92>
 80036a6:	230c      	movs	r3, #12
 80036a8:	6033      	str	r3, [r6, #0]
 80036aa:	4630      	mov	r0, r6
 80036ac:	f000 f928 	bl	8003900 <__malloc_unlock>
 80036b0:	e7e3      	b.n	800367a <_malloc_r+0x1e>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	1b5b      	subs	r3, r3, r5
 80036b6:	d417      	bmi.n	80036e8 <_malloc_r+0x8c>
 80036b8:	2b0b      	cmp	r3, #11
 80036ba:	d903      	bls.n	80036c4 <_malloc_r+0x68>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	441c      	add	r4, r3
 80036c0:	6025      	str	r5, [r4, #0]
 80036c2:	e004      	b.n	80036ce <_malloc_r+0x72>
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	42a2      	cmp	r2, r4
 80036c8:	bf0c      	ite	eq
 80036ca:	600b      	streq	r3, [r1, #0]
 80036cc:	6053      	strne	r3, [r2, #4]
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 f916 	bl	8003900 <__malloc_unlock>
 80036d4:	f104 000b 	add.w	r0, r4, #11
 80036d8:	1d23      	adds	r3, r4, #4
 80036da:	f020 0007 	bic.w	r0, r0, #7
 80036de:	1ac2      	subs	r2, r0, r3
 80036e0:	d0cc      	beq.n	800367c <_malloc_r+0x20>
 80036e2:	1a1b      	subs	r3, r3, r0
 80036e4:	50a3      	str	r3, [r4, r2]
 80036e6:	e7c9      	b.n	800367c <_malloc_r+0x20>
 80036e8:	4622      	mov	r2, r4
 80036ea:	6864      	ldr	r4, [r4, #4]
 80036ec:	e7cc      	b.n	8003688 <_malloc_r+0x2c>
 80036ee:	1cc4      	adds	r4, r0, #3
 80036f0:	f024 0403 	bic.w	r4, r4, #3
 80036f4:	42a0      	cmp	r0, r4
 80036f6:	d0e3      	beq.n	80036c0 <_malloc_r+0x64>
 80036f8:	1a21      	subs	r1, r4, r0
 80036fa:	4630      	mov	r0, r6
 80036fc:	f000 f850 	bl	80037a0 <_sbrk_r>
 8003700:	3001      	adds	r0, #1
 8003702:	d1dd      	bne.n	80036c0 <_malloc_r+0x64>
 8003704:	e7cf      	b.n	80036a6 <_malloc_r+0x4a>
 8003706:	bf00      	nop
 8003708:	20000094 	.word	0x20000094
 800370c:	20000098 	.word	0x20000098

08003710 <_putc_r>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	460d      	mov	r5, r1
 8003714:	4614      	mov	r4, r2
 8003716:	4606      	mov	r6, r0
 8003718:	b118      	cbz	r0, 8003722 <_putc_r+0x12>
 800371a:	6983      	ldr	r3, [r0, #24]
 800371c:	b90b      	cbnz	r3, 8003722 <_putc_r+0x12>
 800371e:	f7ff fe41 	bl	80033a4 <__sinit>
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <_putc_r+0x84>)
 8003724:	429c      	cmp	r4, r3
 8003726:	d124      	bne.n	8003772 <_putc_r+0x62>
 8003728:	6874      	ldr	r4, [r6, #4]
 800372a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800372c:	07d8      	lsls	r0, r3, #31
 800372e:	d405      	bmi.n	800373c <_putc_r+0x2c>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	0599      	lsls	r1, r3, #22
 8003734:	d402      	bmi.n	800373c <_putc_r+0x2c>
 8003736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003738:	f7ff fed2 	bl	80034e0 <__retarget_lock_acquire_recursive>
 800373c:	68a3      	ldr	r3, [r4, #8]
 800373e:	3b01      	subs	r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	da05      	bge.n	8003752 <_putc_r+0x42>
 8003746:	69a2      	ldr	r2, [r4, #24]
 8003748:	4293      	cmp	r3, r2
 800374a:	db1c      	blt.n	8003786 <_putc_r+0x76>
 800374c:	b2eb      	uxtb	r3, r5
 800374e:	2b0a      	cmp	r3, #10
 8003750:	d019      	beq.n	8003786 <_putc_r+0x76>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	6022      	str	r2, [r4, #0]
 8003758:	701d      	strb	r5, [r3, #0]
 800375a:	b2ed      	uxtb	r5, r5
 800375c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800375e:	07da      	lsls	r2, r3, #31
 8003760:	d405      	bmi.n	800376e <_putc_r+0x5e>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	d402      	bmi.n	800376e <_putc_r+0x5e>
 8003768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376a:	f7ff feba 	bl	80034e2 <__retarget_lock_release_recursive>
 800376e:	4628      	mov	r0, r5
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <_putc_r+0x88>)
 8003774:	429c      	cmp	r4, r3
 8003776:	d101      	bne.n	800377c <_putc_r+0x6c>
 8003778:	68b4      	ldr	r4, [r6, #8]
 800377a:	e7d6      	b.n	800372a <_putc_r+0x1a>
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <_putc_r+0x8c>)
 800377e:	429c      	cmp	r4, r3
 8003780:	bf08      	it	eq
 8003782:	68f4      	ldreq	r4, [r6, #12]
 8003784:	e7d1      	b.n	800372a <_putc_r+0x1a>
 8003786:	4629      	mov	r1, r5
 8003788:	4622      	mov	r2, r4
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff fc30 	bl	8002ff0 <__swbuf_r>
 8003790:	4605      	mov	r5, r0
 8003792:	e7e3      	b.n	800375c <_putc_r+0x4c>
 8003794:	08003984 	.word	0x08003984
 8003798:	080039a4 	.word	0x080039a4
 800379c:	08003964 	.word	0x08003964

080037a0 <_sbrk_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d06      	ldr	r5, [pc, #24]	; (80037bc <_sbrk_r+0x1c>)
 80037a4:	2300      	movs	r3, #0
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	f7fd f8be 	bl	800092c <_sbrk>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_sbrk_r+0x1a>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_sbrk_r+0x1a>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	200000f8 	.word	0x200000f8

080037c0 <__sread>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	460c      	mov	r4, r1
 80037c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c8:	f000 f8a0 	bl	800390c <_read_r>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	bfab      	itete	ge
 80037d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037d2:	89a3      	ldrhlt	r3, [r4, #12]
 80037d4:	181b      	addge	r3, r3, r0
 80037d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037da:	bfac      	ite	ge
 80037dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80037de:	81a3      	strhlt	r3, [r4, #12]
 80037e0:	bd10      	pop	{r4, pc}

080037e2 <__swrite>:
 80037e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e6:	461f      	mov	r7, r3
 80037e8:	898b      	ldrh	r3, [r1, #12]
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	4605      	mov	r5, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	4616      	mov	r6, r2
 80037f2:	d505      	bpl.n	8003800 <__swrite+0x1e>
 80037f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f8:	2302      	movs	r3, #2
 80037fa:	2200      	movs	r2, #0
 80037fc:	f000 f868 	bl	80038d0 <_lseek_r>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	4632      	mov	r2, r6
 800380e:	463b      	mov	r3, r7
 8003810:	4628      	mov	r0, r5
 8003812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	f000 b817 	b.w	8003848 <_write_r>

0800381a <__sseek>:
 800381a:	b510      	push	{r4, lr}
 800381c:	460c      	mov	r4, r1
 800381e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003822:	f000 f855 	bl	80038d0 <_lseek_r>
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	bf15      	itete	ne
 800382c:	6560      	strne	r0, [r4, #84]	; 0x54
 800382e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003836:	81a3      	strheq	r3, [r4, #12]
 8003838:	bf18      	it	ne
 800383a:	81a3      	strhne	r3, [r4, #12]
 800383c:	bd10      	pop	{r4, pc}

0800383e <__sclose>:
 800383e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003842:	f000 b813 	b.w	800386c <_close_r>
	...

08003848 <_write_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4d07      	ldr	r5, [pc, #28]	; (8003868 <_write_r+0x20>)
 800384c:	4604      	mov	r4, r0
 800384e:	4608      	mov	r0, r1
 8003850:	4611      	mov	r1, r2
 8003852:	2200      	movs	r2, #0
 8003854:	602a      	str	r2, [r5, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f7fc ff74 	bl	8000744 <_write>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_write_r+0x1e>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_write_r+0x1e>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200000f8 	.word	0x200000f8

0800386c <_close_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4d06      	ldr	r5, [pc, #24]	; (8003888 <_close_r+0x1c>)
 8003870:	2300      	movs	r3, #0
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	f7fc ff90 	bl	800079c <_close>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_close_r+0x1a>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_close_r+0x1a>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200000f8 	.word	0x200000f8

0800388c <_fstat_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4d07      	ldr	r5, [pc, #28]	; (80038ac <_fstat_r+0x20>)
 8003890:	2300      	movs	r3, #0
 8003892:	4604      	mov	r4, r0
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	f7fc ffcf 	bl	800083c <_fstat>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d102      	bne.n	80038a8 <_fstat_r+0x1c>
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	b103      	cbz	r3, 80038a8 <_fstat_r+0x1c>
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
 80038aa:	bf00      	nop
 80038ac:	200000f8 	.word	0x200000f8

080038b0 <_isatty_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4d06      	ldr	r5, [pc, #24]	; (80038cc <_isatty_r+0x1c>)
 80038b4:	2300      	movs	r3, #0
 80038b6:	4604      	mov	r4, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7fc ff2c 	bl	8000718 <_isatty>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_isatty_r+0x1a>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_isatty_r+0x1a>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	200000f8 	.word	0x200000f8

080038d0 <_lseek_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4d07      	ldr	r5, [pc, #28]	; (80038f0 <_lseek_r+0x20>)
 80038d4:	4604      	mov	r4, r0
 80038d6:	4608      	mov	r0, r1
 80038d8:	4611      	mov	r1, r2
 80038da:	2200      	movs	r2, #0
 80038dc:	602a      	str	r2, [r5, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f7fc ff73 	bl	80007ca <_lseek>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_lseek_r+0x1e>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_lseek_r+0x1e>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	200000f8 	.word	0x200000f8

080038f4 <__malloc_lock>:
 80038f4:	4801      	ldr	r0, [pc, #4]	; (80038fc <__malloc_lock+0x8>)
 80038f6:	f7ff bdf3 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 80038fa:	bf00      	nop
 80038fc:	200000f1 	.word	0x200000f1

08003900 <__malloc_unlock>:
 8003900:	4801      	ldr	r0, [pc, #4]	; (8003908 <__malloc_unlock+0x8>)
 8003902:	f7ff bdee 	b.w	80034e2 <__retarget_lock_release_recursive>
 8003906:	bf00      	nop
 8003908:	200000f1 	.word	0x200000f1

0800390c <_read_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	; (800392c <_read_r+0x20>)
 8003910:	4604      	mov	r4, r0
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	2200      	movs	r2, #0
 8003918:	602a      	str	r2, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f7fc ff66 	bl	80007ec <_read>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_read_r+0x1e>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_read_r+0x1e>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	200000f8 	.word	0x200000f8

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
